{"version":3,"sources":["../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.ts","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.html","../ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts","../ngx-mat-timepicker/src/lib/directives/append-to-input.directive.ts","../ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-autofocus.directive.ts","../ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-theme.directive.ts","../ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-toggle-icon.directive.ts","../ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker.directive.ts","../ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-format.enum.ts","../ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-measures.enum.ts","../ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-periods.enum.ts","../ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-units.enum.ts","../ngx-mat-timepicker/src/lib/ngx-mat-timepicker.module.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-active-hour.pipe.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-active-minute.pipe.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-minutes-formatter.pipe.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-parser.pipe.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts","../ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts","../ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker-adapter.ts","../ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker-event.service.ts","../ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker.service.ts","../ngx-mat-timepicker/src/lib/tokens/ngx-mat-timepicker-time-locale.token.ts","../ngx-mat-timepicker/src/lib/utils/ngx-mat-timepicker.utils.ts","../ngx-mat-timepicker/src/public-api.ts","./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/code-viewer/code-viewer.component.ts","./src/app/code-viewer/code-viewer.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\r\n//\r\nimport {NgxMatTimepickerHoursFace} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-12-hours-face\",\r\n    templateUrl: \"ngx-mat-timepicker-12-hours-face.component.html\",\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.period && changes.period.currentValue) {\r\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerHoursFace } from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face\";\r\nimport { NgxMatTimepickerUtils } from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-24-hours-face\",\r\n    templateUrl: \"ngx-mat-timepicker-24-hours-face.component.html\",\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     [format]=\"format\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n","import {Component, Input} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-content\",\r\n    templateUrl: \"./ngx-mat-timepicker-content.component.html\",\r\n})\r\nexport class NgxMatTimepickerContentComponent {\r\n\r\n    @Input() appendToInput: boolean;\r\n    @Input() inputElement: any;\r\n\r\n}\r\n","<div [ngxAppendToInput]=\"inputElement\" *ngIf=\"appendToInput;else timepickerModal\">\r\n    <ng-container *ngTemplateOutlet=\"timepickerOutlet\"></ng-container>\r\n</div>\r\n<ng-template #timepickerModal>\r\n    <ng-container *ngTemplateOutlet=\"timepickerOutlet\"></ng-container>\r\n</ng-template>\r\n<ng-template #timepickerOutlet>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n","import {Component, EventEmitter, OnDestroy, Input, Output, ElementRef, AfterViewInit} from \"@angular/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerParserPipe} from \"../../pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\nfunction retainSelection() {\r\n    this.selectionStart = this.selectionEnd;\r\n}\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dial-control\",\r\n    templateUrl: \"ngx-mat-timepicker-dial-control.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-dial-control.component.scss\"],\r\n    providers: [NgxMatTimepickerParserPipe]\r\n})\r\nexport class NgxMatTimepickerDialControlComponent implements AfterViewInit, OnDestroy {\r\n\r\n    private get _selectedTime(): NgxMatTimepickerClockFace {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    disabled: boolean;\r\n\r\n    @Output()\r\n    focused = new EventEmitter<void>();\r\n\r\n    @Input()\r\n    isActive: boolean;\r\n\r\n    @Input()\r\n    isEditable: boolean;\r\n\r\n    @Input()\r\n    minutesGap: number;\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input()\r\n    time: string;\r\n\r\n    @Output()\r\n    timeChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    @Input()\r\n    timeList: NgxMatTimepickerClockFace[];\r\n\r\n    @Input()\r\n    timeUnit: NgxMatTimepickerUnits;\r\n\r\n    @Output()\r\n    timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\r\n\r\n    @Output()\r\n    unfocused = new EventEmitter<void>();\r\n\r\n    constructor(private _elRef: ElementRef, private _timeParserPipe: NgxMatTimepickerParserPipe) {\r\n    }\r\n\r\n    changeTimeByKeyboard(e: any): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\r\n    }\r\n\r\n    onKeydown(e: any): void {\r\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\r\n            e.preventDefault();\r\n        }\r\n        else {\r\n            this._changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: NgxMatTimepickerUnits): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        if (this._selectedTime) {\r\n            this.timeChanged.next(this._selectedTime);\r\n            this.previousTime = this._selectedTime.time;\r\n        }\r\n    }\r\n\r\n    private _addTime(amount: number): string {\r\n        return `0${+this.time + amount}`.substr(-2);\r\n    }\r\n\r\n    private _changeTimeByArrow(keyCode: number): void {\r\n        let time: string;\r\n\r\n        // arrow up\r\n        if (keyCode === 38) {\r\n            time = this._addTime(this.minutesGap || 1);\r\n        }\r\n        // arrow down\r\n        else if (keyCode === 40) {\r\n            time = this._addTime(-1 * (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: NgxMatTimepickerClockFace[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: NgxMatTimepickerClockFace[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","<input class=\"timepicker-dial__control timepicker-dial__item\"\r\n       [ngClass]=\"{'active': isActive}\"\r\n       [ngModel]=\"time | timeLocalizer: timeUnit: true\"\r\n       (ngModelChange)=\"time = $event\"\r\n       [disabled]=\"disabled\"\r\n       (input)=\"updateTime()\"\r\n       (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n       readonly\r\n       [ngxMatTimepickerAutofocus]=\"isActive\"\r\n       *ngIf=\"!isEditable;else editableTemplate\">\r\n\r\n<ng-template #editableTemplate>\r\n    <input class=\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\"\r\n           [ngClass]=\"{'active': isActive}\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [disabled]=\"disabled\"\r\n           (input)=\"updateTime()\"\r\n           (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n           [ngxMatTimepickerAutofocus]=\"isActive\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTimeByKeyboard($event)\">\r\n</ng-template>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    TemplateRef\r\n} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime, Info} from \"luxon\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dial\",\r\n    templateUrl: \"ngx-mat-timepicker-dial.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-dial.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatTimepickerDialComponent implements OnChanges {\r\n\r\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() format: number;\r\n    @Input() hour: number | string;\r\n    @Output() hourChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    hours: NgxMatTimepickerClockFace[];\r\n    @Input() hoursOnly: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    isHintVisible: boolean;\r\n    @Input() maxTime: DateTime;\r\n    meridiems = Info.meridiems({locale: this._locale});\r\n    @Input() minTime: DateTime;\r\n    @Input() minute: number | string;\r\n    @Output() minuteChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    minutes: NgxMatTimepickerClockFace[];\r\n    @Input() minutesGap: number;\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n\r\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n    @Output() timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    changeHour(hour: NgxMatTimepickerClockFace): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: NgxMatTimepickerClockFace): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const periodChanged = changes.period && changes.period.currentValue;\r\n        if (periodChanged || changes.format && changes.format.currentValue) {\r\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\r\n\r\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (periodChanged || changes.hour && changes.hour.currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n}\r\n","<div class=\"timepicker-dial\">\r\n    <div class=\"timepicker-dial__container\">\r\n        <div class=\"timepicker-dial__time\">\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\r\n                                         [time]=\"hour\"\r\n                                         [timeUnit]=\"timeUnit.HOUR\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeHour($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n            <span>:</span>\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\r\n                                         [time]=\"minute\"\r\n                                         [timeUnit]=\"timeUnit.MINUTE\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         [minutesGap]=\"minutesGap\"\r\n                                         [disabled]=\"hoursOnly\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeMinute($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n        </div>\r\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\r\n                                   *ngIf=\"format !== 24\"\r\n                                   [selectedPeriod]=\"period\"\r\n                                   [activeTimeUnit]=\"activeTimeUnit\"\r\n                                   [maxTime]=\"maxTime\"\r\n                                   [minTime]=\"minTime\"\r\n                                   [format]=\"format\"\r\n                                   [hours]=\"hours\"\r\n                                   [minutes]=\"minutes\"\r\n                                   [selectedHour]=\"hour\"\r\n                                   [meridiems]=\"meridiems\"\r\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\r\n    </div>\r\n    <div *ngIf=\"isEditable || editableHintTmpl\"\r\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\r\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\r\n        <ng-template #editableHintDefault>\r\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n","import {Component, HostListener, Inject, Input, OnDestroy, OnInit, ViewEncapsulation} from \"@angular/core\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\r\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\r\n//\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {shareReplay, takeUntil} from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dialog\",\r\n    styleUrls: [\"./ngx-mat-timepicker-dialog.component.scss\"],\r\n    templateUrl: \"./ngx-mat-timepicker-dialog.component.html\",\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMatTimepickerDialogComponent implements OnInit, OnDestroy {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this._defaultTime = time;\r\n        this._setDefaultTime(time);\r\n    }\r\n\r\n    activeTimeUnit: NgxMatTimepickerUnits = NgxMatTimepickerUnits.HOUR;\r\n    selectedHour: Observable<NgxMatTimepickerClockFace>;\r\n    selectedMinute: Observable<NgxMatTimepickerClockFace>;\r\n    selectedPeriod: Observable<NgxMatTimepickerPeriods>;\r\n    timeUnit: typeof NgxMatTimepickerUnits = NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _defaultTime: string;\r\n    private _subsCtrl$ = new Subject();\r\n\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data: NgxMatTimepickerConfig,\r\n                protected _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent>,\r\n                private _timepickerSrv: NgxMatTimepickerService,\r\n                private _eventSrv: NgxMatTimepickerEventService,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n\r\n        this.color = data.color;\r\n        this.defaultTime = data.defaultTime;\r\n    }\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this._timepickerSrv.period = period;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    close(): void {\r\n        // this.data.timepickerBaseRef.close();\r\n        this._dialogRef.close();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._defineTime();\r\n        this.selectedHour = this._timepickerSrv.selectedHour\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.selectedMinute = this._timepickerSrv.selectedMinute\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\r\n        .subscribe(this._setDefaultTime.bind(this));\r\n    }\r\n\r\n    onHourChange(hour: NgxMatTimepickerClockFace): void {\r\n        this._timepickerSrv.hour = hour;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        if (!this.data.hoursOnly) {\r\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\r\n        }\r\n        this.data.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n\r\n    @HostListener(\"keydown\", [\"$event\"])\r\n    onKeydown(e: any): void {\r\n        this._eventSrv.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    onMinuteChange(minute: NgxMatTimepickerClockFace): void {\r\n        this._timepickerSrv.minute = minute;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    setTime(): void {\r\n        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));\r\n        this.close();\r\n    }\r\n\r\n    private _defineTime(): void {\r\n        const minTime = this.data.minTime;\r\n\r\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\r\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\r\n\r\n            this._setDefaultTime(time);\r\n        }\r\n    }\r\n\r\n    private _onTimeChange(): void {\r\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\r\n            locale: this._locale,\r\n            format: this.data.format\r\n        });\r\n\r\n        this.data.timepickerBaseRef.timeChanged.emit(time);\r\n    }\r\n\r\n    private _setDefaultTime(time: string): void {\r\n        this._timepickerSrv.setDefaultTimeIfAvailable(\r\n            time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\r\n    }\r\n\r\n}\r\n","<ng-template #cancelBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">CANCEL\r\n    </button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">OK\r\n    </button>\r\n</ng-template>\r\n<div mat-dialog-content>\r\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\r\n                                [inputElement]=\"data.inputElement\"\r\n                                [ngxMatTimepickerTheme]=\"data.theme\"\r\n                                cdkTrapFocus\r\n                                cdkTrapFocusAutoCapture>\r\n        <div class=\"timepicker\"\r\n             [ngClass]=\"data.timepickerClass\">\r\n            <mat-toolbar [color]=\"color\"\r\n                         class=\"timepicker-header\">\r\n                <ngx-mat-timepicker-dial [color]=\"color\"\r\n                                         [format]=\"data.format\"\r\n                                         [hour]=\"(selectedHour | async)?.time\"\r\n                                         [minute]=\"(selectedMinute | async)?.time\"\r\n                                         [period]=\"selectedPeriod | async\"\r\n                                         [activeTimeUnit]=\"activeTimeUnit\"\r\n                                         [minTime]=\"data.minTime\"\r\n                                         [maxTime]=\"data.maxTime\"\r\n                                         [isEditable]=\"data.enableKeyboardInput\"\r\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\r\n                                         [minutesGap]=\"data.minutesGap\"\r\n                                         [hoursOnly]=\"data.hoursOnly\"\r\n                                         (periodChanged)=\"changePeriod($event)\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (hourChanged)=\"onHourChange($event)\"\r\n                                         (minuteChanged)=\"onMinuteChange($event)\"\r\n                ></ngx-mat-timepicker-dial>\r\n            </mat-toolbar>\r\n            <div class=\"timepicker__main-content\">\r\n                <div class=\"timepicker__body\"\r\n                     [ngSwitch]=\"activeTimeUnit\">\r\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\r\n                                                          [color]=\"color\"\r\n                                                          (hourChange)=\"onHourChange($event)\"\r\n                                                          [selectedHour]=\"selectedHour | async\"\r\n                                                          [minTime]=\"data.minTime\"\r\n                                                          [maxTime]=\"data.maxTime\"\r\n                                                          [format]=\"data.format\"\r\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\r\n                        <ng-template #ampmHours>\r\n                            <ngx-mat-timepicker-12-hours-face\r\n                                    [color]=\"color\"\r\n                                    (hourChange)=\"onHourChange($event)\"\r\n                                    [selectedHour]=\"selectedHour | async\"\r\n                                    [period]=\"selectedPeriod | async\"\r\n                                    [minTime]=\"data.minTime\"\r\n                                    [maxTime]=\"data.maxTime\"\r\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\r\n                        </ng-template>\r\n                    </div>\r\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                     [color]=\"color\"\r\n                                                     [selectedMinute]=\"selectedMinute | async\"\r\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\r\n                                                     [minTime]=\"data.minTime\"\r\n                                                     [maxTime]=\"data.maxTime\"\r\n                                                     [format]=\"data.format\"\r\n                                                     [period]=\"selectedPeriod | async\"\r\n                                                     [minutesGap]=\"data.minutesGap\"\r\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ngx-mat-timepicker-content>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <div (click)=\"close()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n    </div>\r\n    <div (click)=\"setTime()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n    </div>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\n\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    }\r\n    else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    }\r\n    else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    }\r\n    else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: \"75px\",\r\n        top: \"calc(50% - 75px)\"\r\n    },\r\n    large: {\r\n        height: \"103px\",\r\n        top: \"calc(50% - 103px)\"\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-face\",\r\n    templateUrl: \"./ngx-mat-timepicker-face.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-face.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild(\"clockFace\", {static: true}) clockFace: ElementRef;\r\n    @ViewChild(\"clockHand\", {static: true, read: ElementRef}) clockHand: ElementRef;\r\n\r\n    @Input()\r\n    color: ThemePalette = \"primary\";\r\n\r\n    @Input()\r\n    faceTime: NgxMatTimepickerClockFace[];\r\n\r\n    @Input()\r\n    format: number;\r\n\r\n    innerClockFaceSize = 85;\r\n    isClockFaceDisabled: boolean;\r\n\r\n    @Input()\r\n    minutesGap: number;\r\n\r\n    @Input()\r\n    selectedTime: NgxMatTimepickerClockFace;\r\n\r\n\r\n    @Output()\r\n    timeChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    @Output()\r\n    timeSelected = new EventEmitter<number>();\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n\r\n    @Input()\r\n    unit: NgxMatTimepickerUnits;\r\n\r\n    private _isStarted: boolean;\r\n    private _touchEndHandler: () => any;\r\n    private _touchStartHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this._setClockHandPosition();\r\n        this._addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes.faceTime;\r\n        const selectedTimeChanges = changes.selectedTime;\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this._setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this._selectAvailableTime());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._removeTouchEvents();\r\n    }\r\n\r\n    @HostListener(\"mousedown\", [\"$event\"])\r\n    onMousedown(e: any) {\r\n        e.preventDefault();\r\n        this._isStarted = true;\r\n    }\r\n\r\n    @HostListener(\"mouseup\", [\"$event\"])\r\n    onMouseup(e: any) {\r\n        e.preventDefault();\r\n        this._isStarted = false;\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    @HostListener(\"touchmove\", [\"$event.changedTouches[0]\"])\r\n    @HostListener(\"touchend\", [\"$event.changedTouches[0]\"])\r\n    @HostListener(\"mousemove\", [\"$event\"])\r\n    selectTime(e: any): void {\r\n\r\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = roundAngle(circleAngle, angleStep);\r\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this._isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    trackByTime(_item_, time: NgxMatTimepickerClockFace): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    private _addTouchEvents(): void {\r\n        this._touchStartHandler = this.onMousedown.bind(this);\r\n        this._touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n\r\n    private _decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private _increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n\r\n    private _isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private _removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n\r\n    private _selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private _setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this._decreaseClockHand();\r\n            }\r\n            else {\r\n                this._increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n}\r\n","<ng-template #hourButton\r\n             let-time>\r\n    <button mat-mini-fab\r\n            class=\"mat-elevation-z0\"\r\n            [color]=\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\"\r\n            [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n            [disabled]=\"time.disabled\">\r\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\r\n    </button>\r\n</ng-template>\r\n<div class=\"clock-face\"\r\n     #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\"\r\n         class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\">\r\n            <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n        </div>\r\n        <div class=\"clock-face__inner\"\r\n             *ngIf=\"faceTime.length > 12\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\"\r\n                 [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\">\r\n                <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <mat-toolbar class=\"clock-face__clock-hand\"\r\n                 [color]=\"color\"\r\n                 [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n                 #clockHand\r\n                 [hidden]=\"isClockFaceDisabled\">\r\n        <button mat-mini-fab\r\n                *ngIf=\"unit === timeUnit.MINUTE\"\r\n                [color]=\"color\">\r\n            <span class=\"clock-face__clock-hand_minute_dot\"></span>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-toolbar class=\"clock-face__center\"\r\n                 [color]=\"color\"></mat-toolbar>\r\n</div>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n            <button mat-mini-fab\r\n                    class=\"mat-elevation-z0\"\r\n                    [disableRipple]=\"time.time % minutesGap !== 0\"\r\n                    [color]=\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\"\r\n                    [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\">\r\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\nimport {FloatLabelType} from \"@angular/material/form-field\";\r\n//\r\nimport {NgxMatTimepickerUnits} from \"../../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerParserPipe} from \"../../../pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerClockFace} from \"../../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUtils} from \"../../../utils/ngx-mat-timepicker.utils\";\r\n\r\nfunction concatTime(currentTime: string, nextTime: string): number {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n\r\n        return +time;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-time-control\",\r\n    templateUrl: \"./ngx-mat-timepicker-control.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-control.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [NgxMatTimepickerParserPipe]\r\n})\r\n\r\nexport class NgxMatTimepickerControlComponent implements OnChanges {\r\n\r\n    static nextId: number = 0;\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input()\r\n    set floatLabel(newValue: FloatLabelType) {\r\n        this._floatLabel = newValue;\r\n    }\r\n\r\n    get floatLabel(): FloatLabelType {\r\n        return this._floatLabel;\r\n    }\r\n\r\n    id: number = NgxMatTimepickerControlComponent.nextId++;\r\n    isFocused: boolean;\r\n    @Input() max: number;\r\n    @Input() min: number;\r\n    @Input() placeholder: string;\r\n    @Input() preventTyping: boolean;\r\n\r\n    @Input() time: number;\r\n\r\n    @Output() timeChanged = new EventEmitter<number>();\r\n    @Input() timeList: NgxMatTimepickerClockFace[];\r\n    @Input() timeUnit: NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _floatLabel: FloatLabelType = \"never\";\r\n    private _previousTime: number;\r\n\r\n    constructor(private _timeParser: NgxMatTimepickerParserPipe) {\r\n    }\r\n\r\n    changeTime(event: any): void {\r\n        event.stopPropagation();\r\n\r\n        const char = String.fromCharCode(event.keyCode);\r\n        const time = concatTime(String(this.time), char);\r\n\r\n        this._changeTimeIfValid(time);\r\n    }\r\n\r\n    decrease(): void {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - 1;\r\n\r\n            if (previousTime < this.min) {\r\n                previousTime = this.max;\r\n            }\r\n\r\n            if (this._isSelectedTimeDisabled(previousTime)) {\r\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\r\n            }\r\n\r\n            if (previousTime !== this.time) {\r\n                this.timeChanged.emit(previousTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    increase(): void {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + 1;\r\n\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n\r\n            if (this._isSelectedTimeDisabled(nextTime)) {\r\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\r\n            }\r\n\r\n            if (nextTime !== this.time) {\r\n                this.timeChanged.emit(nextTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.timeList && this.time != null) {\r\n            if (this._isSelectedTimeDisabled(this.time)) {\r\n                this._setAvailableTime();\r\n            }\r\n        }\r\n    }\r\n\r\n    onBlur(): void {\r\n        this.isFocused = false;\r\n\r\n        if (this._previousTime !== this.time) {\r\n            this._changeTimeIfValid(+this.time);\r\n        }\r\n    }\r\n\r\n    onFocus(): void {\r\n        this.isFocused = true;\r\n        this._previousTime = this.time;\r\n    }\r\n\r\n    onKeydown(event: any): void {\r\n        event.stopPropagation();\r\n\r\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.key) {\r\n            case \"ArrowUp\":\r\n                this.increase();\r\n                break;\r\n            case \"ArrowDown\":\r\n                this.decrease();\r\n                break;\r\n        }\r\n\r\n        if (this.preventTyping && event.key !== \"Tab\") {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = +this._timeParser.transform(value, this.timeUnit);\r\n    }\r\n\r\n    private _changeTimeIfValid(value: number | undefined) {\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n\r\n            if (this.time > this.max) {\r\n                const timeString = String(value);\r\n                this.time = +timeString[timeString.length - 1];\r\n            }\r\n\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n    }\r\n\r\n    private _getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\r\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\r\n        const availableTime = fn(currentTimeIndex);\r\n\r\n        return availableTime != null ? availableTime : this.time;\r\n    }\r\n\r\n    private _getNextAvailableTime(index: number): number | undefined {\r\n        const timeCollection = this.timeList;\r\n        const maxValue = timeCollection.length;\r\n        for (let i = index + 1; i < maxValue; i++) {\r\n            const time = timeCollection[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPrevAvailableTime(index: number): number | undefined {\r\n        for (let i = index; i >= 0; i--) {\r\n            const time = this.timeList[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isSelectedTimeDisabled(time: number): boolean {\r\n        return this.timeList.find((faceTime: NgxMatTimepickerClockFace) => faceTime.time === time).disabled;\r\n    }\r\n\r\n    private _setAvailableTime(): void {\r\n        this.time = this.timeList.find(t => !t.disabled).time;\r\n        this.timeChanged.emit(this.time);\r\n    }\r\n}\r\n\r\n","<mat-form-field [color]=\"color\"\r\n                [floatLabel]=\"floatLabel\"\r\n                [ngClass]=\"{'active': isFocused}\"\r\n                class=\"ngx-mat-timepicker-control\">\r\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\r\n           name=\"ngx_mat_timepicker_field_{{id}}\"\r\n           matInput\r\n           maxlength=\"2\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [placeholder]=\"placeholder\"\r\n           [disabled]=\"disabled\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTime($event)\"\r\n           (focus)=\"onFocus()\"\r\n           (blur)=\"onBlur()\" />\r\n    <div class=\"arrows-wrap\"\r\n         matSuffix>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"increase()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\r\n            </svg>\r\n        </span>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"decrease()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0V0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n            </svg>\r\n        </span>\r\n    </div>\r\n</mat-form-field>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    TemplateRef,\r\n    ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {MatSelectChange} from \"@angular/material/select\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\nimport {FloatLabelType} from \"@angular/material/form-field\";\r\n//\r\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {distinctUntilChanged, map, takeUntil, tap} from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-field\",\r\n    templateUrl: \"./ngx-mat-timepicker-field.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-field.component.scss\"],\r\n    providers: [\r\n        NgxMatTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerFieldComponent,\r\n            multi: true\r\n        }\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(val: string) {\r\n        this._defaultTime = val;\r\n        this._isDefaultTime = !!val;\r\n    }\r\n\r\n    get floatLabel(): FloatLabelType {\r\n        return this._floatLabel;\r\n    }\r\n\r\n    @Input()\r\n    set floatLabel(newValue: FloatLabelType) {\r\n        this._floatLabel = newValue;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this._updateTime(this.timepickerTime);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    @Input()\r\n    cancelBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    clockTheme: NgxMatTimepickerTheme;\r\n\r\n    @Input()\r\n    confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    controlOnly: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n    hour$: Observable<NgxMatTimepickerClockFace>;\r\n\r\n    hoursList: NgxMatTimepickerClockFace[];\r\n    isChangePeriodDisabled: boolean;\r\n    isTimeRangeSet: boolean;\r\n    maxHour = 12;\r\n    minHour = 1;\r\n    minute$: Observable<NgxMatTimepickerClockFace>;\r\n    minutesList: NgxMatTimepickerClockFace[];\r\n    period: NgxMatTimepickerPeriods = NgxMatTimepickerPeriods.AM;\r\n    periods: NgxMatTimepickerPeriods[] = [\r\n        NgxMatTimepickerPeriods.AM,\r\n        NgxMatTimepickerPeriods.PM\r\n    ];\r\n\r\n    @Output() timeChanged = new EventEmitter<string>();\r\n    timepickerTime: string;\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _defaultTime: string;\r\n    private _floatLabel: FloatLabelType = \"never\";\r\n    private _format = 12;\r\n    private _isDefaultTime: boolean;\r\n    private _isFirstTimeChange: boolean = true;\r\n    private _max: string | DateTime;\r\n    private _min: string | DateTime;\r\n    private _previousFormat: number;\r\n    private _selectedHour: number;\r\n    private _subsCtrl$ = new Subject();\r\n\r\n    constructor(private _timepickerService: NgxMatTimepickerService,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    changeHour(hour: number): void {\r\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this._changeTime();\r\n    }\r\n\r\n    changeMinute(minute: number): void {\r\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this._changeTime();\r\n    }\r\n\r\n    changePeriod(event: MatSelectChange): void {\r\n        this._timepickerService.period = event.value as NgxMatTimepickerPeriods;\r\n        this._changeTime();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._initTime(this.defaultTime);\r\n\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\r\n        this.isTimeRangeSet = !!(this.min || this.max);\r\n\r\n        this.hour$ = this._timepickerService.selectedHour.pipe(\r\n            tap((clockTime: NgxMatTimepickerClockFace) => this._selectedHour = clockTime.time),\r\n            map(this._changeDefaultTimeValue.bind(this)),\r\n            tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())\r\n        ) as Observable<NgxMatTimepickerClockFace>;\r\n        this.minute$ = this._timepickerService.selectedMinute.pipe(\r\n            map(this._changeDefaultTimeValue.bind(this)),\r\n            tap(() => this._isFirstTimeChange = false)\r\n        ) as Observable<NgxMatTimepickerClockFace>;\r\n\r\n        if (this.format === 12) {\r\n            this._timepickerService.selectedPeriod.pipe(\r\n                distinctUntilChanged<NgxMatTimepickerPeriods>(),\r\n                tap((period: NgxMatTimepickerPeriods) => this.period = period),\r\n                tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)),\r\n                takeUntil(this._subsCtrl$)\r\n            ).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\r\n        }\r\n\r\n    }\r\n\r\n    onTimeSet(time: string): void {\r\n        this._updateTime(time);\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(_fn_: any): void {\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    writeValue(val: string): void {\r\n        if (val) {\r\n            this._initTime(val);\r\n        }\r\n        else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n\r\n    private _changeDefaultTimeValue(clockFaceTime: NgxMatTimepickerClockFace): NgxMatTimepickerClockFace {\r\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\r\n            return {...clockFaceTime, time: null};\r\n        }\r\n\r\n        return clockFaceTime;\r\n    }\r\n\r\n    private _changeTime(): void {\r\n        const time = this._timepickerService.getFullTime(this.format);\r\n        this.timepickerTime = time;\r\n\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n\r\n    private _emitLocalTimeChange(time: string): void {\r\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {format: this.format, locale: this._locale});\r\n\r\n        this._onChange(localTime);\r\n        this.timeChanged.emit(localTime);\r\n    }\r\n\r\n    private _initTime(time): void {\r\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\r\n        .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, \"minutes\", null, this.format);\r\n        if (!isDefaultTimeAvailable) {\r\n            if (this.min) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min as DateTime, this.format));\r\n\r\n                return;\r\n            }\r\n            if (this.max) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max as DateTime, this.format));\r\n\r\n                return;\r\n            }\r\n        }\r\n        this._updateTime(time);\r\n    }\r\n\r\n    private _isPeriodDisabled(period): boolean {\r\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: 12,\r\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\r\n        }).every(time => time.disabled);\r\n    }\r\n\r\n    private _onChange: (value: string) => void = () => {\r\n    }\r\n\r\n    private _resetTime(): void {\r\n        this._timepickerService.hour = {angle: 0, time: null};\r\n        this._timepickerService.minute = {angle: 0, time: null};\r\n    }\r\n\r\n    private _updateAvailableHours(): void {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n\r\n    private _updateAvailableMinutes(): void {\r\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n\r\n    private _updateAvailableTime(): void {\r\n        this._updateAvailableHours();\r\n        if (this._selectedHour) {\r\n            this._updateAvailableMinutes();\r\n        }\r\n    }\r\n\r\n    private _updateTime(time: string): void {\r\n        if (time) {\r\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {locale: this._locale, format: this.format});\r\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\r\n            this.timepickerTime = formattedTime;\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"(hour$ | async)?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"(minute$ | async)?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    *ngIf=\"format !== 24\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [theme]=\"clockTheme\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n","import {EventEmitter, Input, Output} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n\r\nexport class NgxMatTimepickerHoursFace {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() format: number;\r\n    @Output() hourChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: NgxMatTimepickerClockFace[] = [];\r\n    @Input() maxTime: DateTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() selectedHour: NgxMatTimepickerClockFace;\r\n\r\n    protected _color: ThemePalette = \"primary\";\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-minutes-face\",\r\n    templateUrl: \"./ngx-mat-timepicker-minutes-face.component.html\"\r\n})\r\nexport class NgxMatTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() format: number;\r\n    @Input() maxTime: DateTime;\r\n    @Input() minTime: DateTime;\r\n\r\n    @Output() minuteChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    @Input() minutesGap: number;\r\n\r\n    minutesList: NgxMatTimepickerClockFace[] = [];\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n    @Input() selectedHour: number;\r\n\r\n    @Input() selectedMinute: NgxMatTimepickerClockFace;\r\n    timeUnit = NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.period && changes.period.currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [faceTime]=\"minutesList\"\r\n                     [selectedTime]=\"selectedMinute\"\r\n                     [minutesGap]=\"minutesGap\"\r\n                     (timeChange)=\"minuteChange.next($event)\"\r\n                     [unit]=\"timeUnit.MINUTE\"></ngx-mat-timepicker-face>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\n//\r\nimport { NgxMatTimepickerPeriods } from '../../models/ngx-mat-timepicker-periods.enum';\r\nimport { NgxMatTimepickerUnits } from '../../models/ngx-mat-timepicker-units.enum';\r\nimport { NgxMatTimepickerClockFace } from '../../models/ngx-mat-timepicker-clock-face.interface';\r\nimport { NgxMatTimepickerUtils } from '../../utils/ngx-mat-timepicker.utils';\r\n//\r\nimport { DateTime } from 'luxon';\r\n\r\n@Component({\r\n    selector: 'ngx-mat-timepicker-period',\r\n    templateUrl: 'ngx-mat-timepicker-period.component.html',\r\n    styleUrls: ['ngx-mat-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMatTimepickerPeriodComponent {\r\n\r\n    timePeriod = NgxMatTimepickerPeriods;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: NgxMatTimepickerPeriods;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\r\n    @Input() hours: NgxMatTimepickerClockFace[];\r\n    @Input() minutes: NgxMatTimepickerClockFace[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n    @Input() meridiems: string[];\r\n\r\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private _isSwitchPeriodAvailable(period: NgxMatTimepickerPeriods): boolean {\r\n        const time = this._getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private _getDisabledTimeByPeriod(period: NgxMatTimepickerPeriods): NgxMatTimepickerClockFace[] {\r\n        switch (this.activeTimeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such NgxMatTimepickerUnits');\r\n        }\r\n    }\r\n}\r\n","<div class=\"timepicker-period\">\r\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\r\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.AM}\"\r\n            (click)=\"changePeriod(timePeriod.AM)\"\r\n            type=\"button\">{{meridiems[0]}}</button>\r\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\r\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.PM}\"\r\n            (click)=\"changePeriod(timePeriod.PM)\"\r\n            type=\"button\">{{meridiems[1]}}</button>\r\n    <div class=\"timepicker-period__warning\"\r\n         [@scaleInOut]\r\n         (@scaleInOut.done)=\"animationDone()\"\r\n         *ngIf=\"!isPeriodAvailable\">\r\n        <p>Current time would be invalid in this period.</p>\r\n    </div>\r\n</div>\r\n","import {Component, ContentChild, Input} from \"@angular/core\";\r\nimport {NgxMatTimepickerToggleIconDirective} from \"../../directives/ngx-mat-timepicker-toggle-icon.directive\";\r\nimport {NgxMatTimepickerComponent} from \"../ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-toggle\",\r\n    templateUrl: \"ngx-mat-timepicker-toggle.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-toggle.component.scss\"]\r\n})\r\n\r\nexport class NgxMatTimepickerToggleComponent {\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    @ContentChild(NgxMatTimepickerToggleIconDirective, {static: true}) customIcon: NgxMatTimepickerToggleIconDirective;\r\n\r\n    @Input(\"for\") timepicker: NgxMatTimepickerComponent;\r\n\r\n    private _disabled: boolean;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","<button class=\"ngx-mat-timepicker-toggle mat-elevation-z0\"\r\n        color=\"\"\r\n        mat-mini-fab\r\n        (click)=\"open($event)\"\r\n        [disabled]=\"disabled\"\r\n        type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n         viewBox=\"0 0 24 24\"\r\n         width=\"24px\"\r\n         height=\"24px\"\r\n         *ngIf=\"!customIcon\">\r\n        <path d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\" />\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMatTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n","import {Component, EventEmitter, Input, Output, TemplateRef} from \"@angular/core\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\r\nimport {NgxMatTimepickerDirective} from \"../../directives/ngx-mat-timepicker.directive\";\r\nimport {NgxMatTimepickerRef} from \"../../models/ngx-mat-timepicker-ref.interface\";\r\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {merge, Subject} from \"rxjs\";\r\nimport {filter, takeUntil} from \"rxjs/operators\";\r\nimport {NgxMatTimepickerDialogComponent} from \"../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker\",\r\n    template: \"\",\r\n})\r\nexport class NgxMatTimepickerComponent implements NgxMatTimepickerRef {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this._timepickerInput && this._timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get inputElement(): any {\r\n        return this._timepickerInput && this._timepickerInput.element;\r\n    }\r\n\r\n    get maxTime(): DateTime {\r\n        return this._timepickerInput ? (this._timepickerInput.max as DateTime) : this.max;\r\n    }\r\n\r\n    get minTime(): DateTime {\r\n        return this._timepickerInput ? (this._timepickerInput.min as DateTime) : this.min;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get time(): string {\r\n        return this._timepickerInput && this._timepickerInput.value;\r\n    }\r\n\r\n    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme) {\r\n        this._ngxMatTimepickerTheme = newValue;\r\n    }\r\n\r\n    @Input() appendToInput: boolean;\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Output() closed = new EventEmitter<void>();\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input() defaultTime: string;\r\n    @Input() disableAnimation: boolean;\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() enableKeyboardInput: boolean;\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n    @Input() hoursOnly = false;\r\n    @Input() isEsc = true;\r\n    @Input() max: DateTime;\r\n    @Input() min: DateTime;\r\n    @Output() opened = new EventEmitter<void>();\r\n    @Input() preventOverlayClick: boolean;\r\n    @Input() theme: NgxMatTimepickerTheme;\r\n    @Output() timeChanged = new EventEmitter<string>();\r\n    @Input() timepickerClass: string;\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    timeUpdated = new Subject<string>(); // used in the dialog, check if a better approach can be used\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _format: number;\r\n    private _minutesGap: number;\r\n    private _ngxMatTimepickerTheme: NgxMatTimepickerTheme;\r\n    private _timepickerInput: NgxMatTimepickerDirective;\r\n\r\n    constructor(private _dialog: MatDialog,\r\n                private _eventService: NgxMatTimepickerEventService) {\r\n    }\r\n\r\n    open(): void {\r\n        this._dialog.open(NgxMatTimepickerDialogComponent, {\r\n            panelClass: \"ngx-mat-timepicker-dialog\",\r\n            data: {\r\n                timepickerBaseRef: this,\r\n                time: this.time,\r\n                defaultTime: this.defaultTime,\r\n                maxTime: this.maxTime,\r\n                minTime: this.minTime,\r\n                format: this.format,\r\n                minutesGap: this.minutesGap,\r\n                disableAnimation: this.disableAnimation,\r\n                cancelBtnTmpl: this.cancelBtnTmpl,\r\n                confirmBtnTmpl: this.confirmBtnTmpl,\r\n                editableHintTmpl: this.editableHintTmpl,\r\n                disabled: this.disabled,\r\n                enableKeyboardInput: this.enableKeyboardInput,\r\n                preventOverlayClick: this.preventOverlayClick,\r\n                appendToInput: this.appendToInput,\r\n                hoursOnly: this.hoursOnly,\r\n                theme: this.theme || this._ngxMatTimepickerTheme,\r\n                timepickerClass: this.timepickerClass,\r\n                inputElement: this.inputElement,\r\n                color: this.color\r\n            }\r\n        })\r\n        .afterClosed()\r\n        .subscribe(() => {\r\n            this.closed.emit();\r\n        });\r\n        this.opened.emit();\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: NgxMatTimepickerDirective): void {\r\n        if (this._timepickerInput) {\r\n            throw Error(\"A Timepicker can only be associated with a single input.\");\r\n        }\r\n        this._timepickerInput = input;\r\n    }\r\n\r\n    unregisterInput(): void {\r\n        this._timepickerInput = void 0;\r\n    }\r\n\r\n    updateTime(time: string): void {\r\n        this.timeUpdated.next(time);\r\n    }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\r\n\r\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\r\n\r\n@Directive({\r\n    selector: '[ngxAppendToInput]'\r\n})\r\nexport class AppendToInputDirective implements AfterViewInit {\r\n\r\n    @Input('ngxAppendToInput') inputElement: any;\r\n\r\n    private _direction: TimepickerDirection;\r\n    private _inputCords: ClientRect;\r\n    private readonly element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef<HTMLElement>,\r\n                private renderer: Renderer2) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    private get inputCords(): ClientRect {\r\n        return this.inputElement.getBoundingClientRect();\r\n    }\r\n\r\n    private get direction(): TimepickerDirection {\r\n        const height = this.element.offsetHeight;\r\n        const {bottom, top} = this._inputCords;\r\n        const isElementFit = (window && window.innerHeight) - bottom < height;\r\n        const isTop = isElementFit && top > height;\r\n        const isCenter = isElementFit && top < height;\r\n\r\n        if (isTop) {\r\n            return 'top';\r\n        } else if (isCenter) {\r\n            return 'center';\r\n        }\r\n        return 'bottom';\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this._inputCords = this.inputCords;\r\n        this._direction = this.direction;\r\n\r\n        this.append();\r\n    }\r\n\r\n    @HostListener('window:scroll')\r\n    changePosition(): void {\r\n        const {bottom, top} = this.inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n\r\n    private append(): void {\r\n        const {left, bottom, top} = this._inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n\r\n        this.setStyle('position', 'fixed');\r\n        this.setStyle('left', `${left}px`);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n\r\n    private setStyle(style: string, value: string): void {\r\n        this.renderer.setStyle(this.element, style, value);\r\n    }\r\n\r\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\r\n        if (this._direction === 'top') {\r\n            return inputTop - this.element.offsetHeight;\r\n        } else if (this._direction === 'center') {\r\n            return inputTop - (this.element.offsetHeight / 2);\r\n        }\r\n        return inputBottom;\r\n    }\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from \"@angular/core\";\r\nimport {DOCUMENT} from \"@angular/common\";\r\n\r\n@Directive({\r\n    selector: \"[ngxMatTimepickerAutofocus]\"\r\n})\r\nexport class NgxMatTimepickerAutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input(\"ngxMatTimepickerAutofocus\") isFocusActive: boolean;\r\n\r\n    private _activeElement: HTMLElement;\r\n\r\n    constructor(private _element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this._activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\n","import {AfterViewInit, Directive, ElementRef, Input} from \"@angular/core\";\r\nimport {NgxMatTimepickerTheme} from \"../models/ngx-mat-timepicker-theme.interface\";\r\n\r\n@Directive({selector: \"[ngxMatTimepickerTheme]\"})\r\nexport class NgxMatTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input(\"ngxMatTimepickerTheme\")\r\n    theme: NgxMatTimepickerTheme;\r\n\r\n    private _element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this._element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === \"string\") {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this._element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n}\r\n","import {Directive} from \"@angular/core\";\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: \"[ngxMatTimepickerToggleIcon]\"})\r\n\r\nexport class NgxMatTimepickerToggleIconDirective {\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from \"@angular/core\";\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerComponent} from \"../components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {Subject} from \"rxjs\";\r\nimport {takeUntil} from \"rxjs/operators\";\r\n\r\n@Directive({\r\n    selector: \"[ngxMatTimepicker]\",\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerDirective,\r\n            multi: true\r\n        }\r\n    ],\r\n    // tslint:disable-next-line:no-host-metadata-property\r\n    host: {\r\n        \"[disabled]\": \"disabled\",\r\n        // \"(change)\": \"updateValue($event.target.value)\",\r\n        \"(blur)\": \"onTouched()\",\r\n    },\r\n})\r\nexport class NgxMatTimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    get element(): any {\r\n        return this._elementRef && this._elementRef.nativeElement;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = +value === 24 ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    @Input(\"ngxMatTimepicker\")\r\n    set timepicker(picker: NgxMatTimepickerComponent) {\r\n        this._registerTimepicker(picker);\r\n    }\r\n\r\n    get value(): string {\r\n        if (!this._value) {\r\n            return \"\";\r\n        }\r\n\r\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this._locale});\r\n    }\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = \"\";\r\n            this._updateInputValue();\r\n\r\n            return;\r\n        }\r\n        const time = NgxMatTimepickerAdapter.formatTime(value, {locale: this._locale, format: this.format});\r\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(\r\n            time,\r\n            this._min as DateTime,\r\n            this._max as DateTime,\r\n            \"minutes\",\r\n            this._timepicker.minutesGap,\r\n            this._format\r\n        );\r\n\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this._updateInputValue();\r\n\r\n            return;\r\n        }\r\n        console.warn(\"Selected time doesn't match min or max value\");\r\n    }\r\n\r\n    private set _defaultTime(time: string) {\r\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\r\n            locale: this._locale,\r\n            format: this.format\r\n        });\r\n    }\r\n\r\n    @Input()\r\n    disableClick: boolean;\r\n\r\n    @Input()\r\n    disabled: boolean;\r\n\r\n    private _format = 12;\r\n    private _max: string | DateTime;\r\n    private _min: string | DateTime;\r\n    private _previousFormat: number;\r\n    private _subsCtrl$: Subject<void> = new Subject<void>();\r\n    private _timepicker: NgxMatTimepickerComponent;\r\n    private _value: string = \"\";\r\n\r\n    constructor(private _elementRef: ElementRef,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.value && changes.value.currentValue) {\r\n            this._defaultTime = changes.value.currentValue;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._unregisterTimepicker();\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    @HostListener(\"change\")\r\n    updateValue(value: string) {\r\n        this.value = value;\r\n        this._onChange(value);\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        if (value) {\r\n            this._defaultTime = value;\r\n        }\r\n    }\r\n\r\n    private _onChange: (value: any) => void = () => {\r\n    };\r\n\r\n    private _registerTimepicker(picker: NgxMatTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this._timepicker.timeSet\r\n            .pipe(takeUntil(this._subsCtrl$))\r\n            .subscribe((time: string) => {\r\n                this.value = time;\r\n                this._onChange(this.value);\r\n                this.onTouched();\r\n                this._defaultTime = this._value;\r\n            });\r\n        }\r\n        else {\r\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\r\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\r\n        }\r\n    }\r\n\r\n    private _unregisterTimepicker(): void {\r\n        if (this._timepicker) {\r\n            this._timepicker.unregisterInput();\r\n        }\r\n    }\r\n\r\n    private _updateInputValue(): void {\r\n        this._elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","export enum NgxMatTimepickerFormat {\r\n    TWELVE = \"hh:mm a\",\r\n    TWELVE_SHORT = \"h:m a\",\r\n    TWENTY_FOUR = \"HH:mm\",\r\n    TWENTY_FOUR_SHORT = \"H:m\"\r\n}\r\n","export enum NgxMatTimepickerMeasure {\r\n    hour = \"hour\",\r\n    minute = \"minute\"\r\n}\r\n","export enum NgxMatTimepickerPeriods {\r\n    AM = \"AM\",\r\n    PM = \"PM\"\r\n}\r\n","export enum NgxMatTimepickerUnits {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {A11yModule} from \"@angular/cdk/a11y\";\r\n// MATERIAL\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\nimport {MatSelectModule} from \"@angular/material/select\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\n// MAT-TIMEPICKER\r\nimport {NgxMatTimepickerComponent} from \"./components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\nimport {NgxMatTimepickerToggleComponent} from \"./components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\r\nimport {NgxMatTimepickerDirective} from \"./directives/ngx-mat-timepicker.directive\";\r\nimport {NgxMatTimepickerToggleIconDirective} from \"./directives/ngx-mat-timepicker-toggle-icon.directive\";\r\nimport {NgxMatTimepickerThemeDirective} from \"./directives/ngx-mat-timepicker-theme.directive\";\r\nimport {\r\n    NgxMatTimepicker24HoursFaceComponent\r\n} from \"./components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component\";\r\nimport {\r\n    NgxMatTimepicker12HoursFaceComponent\r\n} from \"./components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component\";\r\nimport {\r\n    NgxMatTimepickerMinutesFaceComponent\r\n} from \"./components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component\";\r\nimport {NgxMatTimepickerFaceComponent} from \"./components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component\";\r\nimport {NgxMatTimepickerDialComponent} from \"./components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component\";\r\nimport {\r\n    NgxMatTimepickerDialControlComponent\r\n} from \"./components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component\";\r\nimport {NgxMatTimepickerPeriodComponent} from \"./components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component\";\r\nimport {NgxMatTimepickerTimeFormatterPipe} from \"./pipes/ngx-mat-timepicker-time-formatter.pipe\";\r\nimport {NgxMatTimepickerMinutesFormatterPipe} from \"./pipes/ngx-mat-timepicker-minutes-formatter.pipe\";\r\nimport {NgxMatTimepickerAutofocusDirective} from \"./directives/ngx-mat-timepicker-autofocus.directive\";\r\nimport {NgxMatTimepickerFieldComponent} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\r\nimport {\r\n    NgxMatTimepickerControlComponent\r\n} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component\";\r\nimport {NgxMatTimepickerTimeLocalizerPipe} from \"./pipes/ngx-mat-timepicker-time-localizer.pipe\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"./tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerParserPipe} from \"./pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerActiveHourPipe} from \"./pipes/ngx-mat-timepicker-active-hour.pipe\";\r\nimport {NgxMatTimepickerActiveMinutePipe} from \"./pipes/ngx-mat-timepicker-active-minute.pipe\";\r\nimport {\r\n    NgxMatTimepickerContentComponent\r\n} from \"./components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component\";\r\nimport {NgxMatTimepickerDialogComponent} from \"./components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\r\nimport {AppendToInputDirective} from \"./directives/append-to-input.directive\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        A11yModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatDialogModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n        MatIconModule\r\n    ],\r\n    exports: [\r\n        NgxMatTimepickerComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerToggleIconDirective\r\n    ],\r\n    declarations: [\r\n        NgxMatTimepickerDialogComponent,\r\n        NgxMatTimepickerActiveHourPipe,\r\n        NgxMatTimepickerActiveMinutePipe,\r\n        AppendToInputDirective,\r\n        NgxMatTimepickerComponent,\r\n        NgxMatTimepicker24HoursFaceComponent,\r\n        NgxMatTimepicker12HoursFaceComponent,\r\n        NgxMatTimepickerMinutesFaceComponent,\r\n        NgxMatTimepickerFaceComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepickerDialComponent,\r\n        NgxMatTimepickerDialControlComponent,\r\n        NgxMatTimepickerPeriodComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerToggleIconDirective,\r\n        NgxMatTimepickerAutofocusDirective,\r\n        NgxMatTimepickerMinutesFormatterPipe,\r\n        NgxMatTimepickerThemeDirective,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerControlComponent,\r\n        NgxMatTimepickerParserPipe,\r\n        NgxMatTimepickerContentComponent,\r\n        NgxMatTimepickerTimeFormatterPipe,\r\n        NgxMatTimepickerTimeLocalizerPipe\r\n    ],\r\n    entryComponents: [\r\n        NgxMatTimepickerDialogComponent\r\n    ]\r\n})\r\nexport class NgxMatTimepickerModule {\r\n\r\n    static setLocale(locale: string): ModuleWithProviders<NgxMatTimepickerModule> {\r\n        return {\r\n            ngModule: NgxMatTimepickerModule,\r\n            providers: [\r\n                {provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale}\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeHour'\r\n})\r\nexport class NgxMatTimepickerActiveHourPipe implements PipeTransform {\r\n\r\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n\r\n        return hour === currentHour;\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeMinute'\r\n})\r\nexport class NgxMatTimepickerActiveMinutePipe implements PipeTransform {\r\n\r\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class NgxMatTimepickerMinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Inject, Injectable, Pipe, PipeTransform} from \"@angular/core\";\r\n//\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\r\n//\r\nimport {DateTime, NumberingSystem} from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"ngxMatTimepickerParser\"\r\n})\r\n@Injectable()\r\nexport class NgxMatTimepickerParserPipe implements PipeTransform {\r\n\r\n    private readonly _numberingSystem: NumberingSystem;\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\r\n    }\r\n\r\n    transform(time: string | number, timeUnit = NgxMatTimepickerUnits.HOUR): string {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        if (!isNaN(+time)) {\r\n            return `${time}`;\r\n        }\r\n\r\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\r\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\r\n        }\r\n\r\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\r\n    }\r\n\r\n    private _parseTime(time: string | number, format: string, timeMeasure: NgxMatTimepickerMeasure): number {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this._numberingSystem})[timeMeasure];\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerUnits } from \"../models/ngx-mat-timepicker-units.enum\";\r\n//\r\nimport { DateTime } from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"timeFormatter\"\r\n})\r\nexport class NgxMatTimepickerTimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits): any {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return DateTime.fromObject({hour: +time}).toFormat(\"HH\");\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return DateTime.fromObject({minute: +time}).toFormat(\"mm\");\r\n            default:\r\n                throw new Error(\"no such time unit\");\r\n        }\r\n    }\r\n\r\n}\r\n","import {Inject, Pipe, PipeTransform} from \"@angular/core\";\r\n//\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"timeLocalizer\"\r\n})\r\nexport class NgxMatTimepickerTimeLocalizerPipe implements PipeTransform {\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits, isKeyboardEnabled = false): string {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR: {\r\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\r\n\r\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\r\n            }\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n\r\n    private _formatTime(timeMeasure: NgxMatTimepickerMeasure, time: string | number, format: string): string {\r\n        try {\r\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this._locale).toFormat(format);\r\n        } catch {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\r\n        }\r\n    }\r\n}\r\n","import {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\r\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerOptions} from \"../models/ngx-mat-timepicker-options.interface\";\r\n//\r\nimport {DateTime, LocaleOptions, NumberingSystem} from \"luxon\";\r\n\r\n// @dynamic\r\nexport class NgxMatTimepickerAdapter {\r\n\r\n    static defaultFormat = 12;\r\n    static defaultLocale = \"en-US\";\r\n    static defaultNumberingSistem: NumberingSystem = \"latn\";\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: NgxMatTimepickerPeriods): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\r\n            return 0;\r\n        }\r\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n\r\n        return hour;\r\n    }\r\n\r\n    static formatTime(time: string, opts: NgxMatTimepickerOptions): string {\r\n        if (!time) {\r\n            return \"Invalid Time\";\r\n        }\r\n        const {format} = opts;\r\n        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);\r\n\r\n        if (format !== 24) {\r\n            return parsedTime.toLocaleString({\r\n                ...DateTime.TIME_SIMPLE,\r\n                hour12: format !== 24,\r\n                numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem\r\n            }).replace(/\\u200E/g, \"\");\r\n        }\r\n\r\n        return parsedTime.toISOTime({\r\n            includeOffset: false,\r\n            suppressMilliseconds: true,\r\n            suppressSeconds: true\r\n        }).replace(/\\u200E/g, \"\");\r\n    }\r\n\r\n    static fromDateTimeToString(time: DateTime, format: number): string {\r\n        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;\r\n\r\n        return time.reconfigure({\r\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\r\n            locale: NgxMatTimepickerAdapter.defaultLocale\r\n        }).toFormat(timeFormat);\r\n    }\r\n\r\n    static isBetween(time: DateTime, before: DateTime, after: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);\r\n        }\r\n    }\r\n\r\n    static isSameOrAfter(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return time.hour >= compareWith.hour;\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    static isSameOrBefore(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return time.hour <= compareWith.hour;\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    static isTimeAvailable(time: string,\r\n                           min?: DateTime,\r\n                           max?: DateTime,\r\n                           granularity?: \"hours\" | \"minutes\",\r\n                           minutesGap?: number | null,\r\n                           format?: number): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.parseTime(time, {format});\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && this.isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && this.isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && this.isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n\r\n    static parseTime(time: string, opts: NgxMatTimepickerOptions): DateTime {\r\n        const {numberingSystem, locale} = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);\r\n        const isPeriodExist = time.split(\" \").length === 2;\r\n        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\r\n    }\r\n\r\n    static toLocaleTimeString(time: string, opts: NgxMatTimepickerOptions = {}): string {\r\n        const {format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale} = opts;\r\n        const hourCycle = format === 24 ? \"h23\" : \"h12\";\r\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\r\n        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\r\n    }\r\n\r\n    private static _getLocaleOptionsByTime(time: string, opts: NgxMatTimepickerOptions): LocaleOptions {\r\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\r\n        const localeConfig: LocaleOptions = {\r\n            numberingSystem: numberingSystem as NumberingSystem,\r\n            locale\r\n        };\r\n        const defaultConfig: LocaleOptions = {\r\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\r\n            locale: NgxMatTimepickerAdapter.defaultLocale\r\n        };\r\n\r\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\r\n    }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\n//\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {shareReplay} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class NgxMatTimepickerEventService {\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this._backdropClick$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this._keydownEvent$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n    }\r\n\r\n    private _backdropClick$: Subject<MouseEvent> = new Subject();\r\n    private _keydownEvent$: Subject<KeyboardEvent> = new Subject();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case \"click\":\r\n                this._backdropClick$.next(event as MouseEvent);\r\n                break;\r\n            case \"keydown\":\r\n                this._keydownEvent$.next(event as KeyboardEvent);\r\n                break;\r\n            default:\r\n                throw new Error(\"no such event type\");\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NgxMatTimepickerClockFace } from \"../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { NgxMatTimepickerPeriods } from \"../models/ngx-mat-timepicker-periods.enum\";\r\nimport { NgxMatTimepickerAdapter } from \"./ngx-mat-timepicker-adapter\";\r\nimport { DateTime } from \"luxon\";\r\n\r\nconst DEFAULT_HOUR: NgxMatTimepickerClockFace = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: NgxMatTimepickerClockFace = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class NgxMatTimepickerService {\r\n\r\n\r\n    set hour(hour: NgxMatTimepickerClockFace) {\r\n        this._hour$.next(hour);\r\n    }\r\n\r\n    set minute(minute: NgxMatTimepickerClockFace) {\r\n        this._minute$.next(minute);\r\n    }\r\n\r\n    set period(period: NgxMatTimepickerPeriods) {\r\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this._period$.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedHour(): Observable<NgxMatTimepickerClockFace> {\r\n        return this._hour$.asObservable();\r\n    }\r\n\r\n    get selectedMinute(): Observable<NgxMatTimepickerClockFace> {\r\n        return this._minute$.asObservable();\r\n    }\r\n\r\n    get selectedPeriod(): Observable<NgxMatTimepickerPeriods> {\r\n        return this._period$.asObservable();\r\n    }\r\n\r\n    private _hour$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_HOUR);\r\n    private _minute$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_MINUTE);\r\n    private _period$ = new BehaviorSubject<NgxMatTimepickerPeriods>(NgxMatTimepickerPeriods.AM);\r\n\r\n    getFullTime(format: number): string {\r\n        const selectedHour = this._hour$.getValue().time;\r\n        const selectedMinute = this._minute$.getValue().time;\r\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\r\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\r\n        const period = format === 12 ? this._period$.getValue() : \"\";\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n\r\n        return NgxMatTimepickerAdapter.formatTime(time, {format});\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\r\n                this._setDefaultTime(time, format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    private _resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = NgxMatTimepickerPeriods.AM;\r\n    }\r\n\r\n    private _setDefaultTime(time: string, format: number) {\r\n        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, {format}).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as NgxMatTimepickerPeriods)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as NgxMatTimepickerPeriods;\r\n\r\n        } else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: NgxMatTimepickerPeriods): number {\r\n    switch (period) {\r\n        case NgxMatTimepickerPeriods.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case NgxMatTimepickerPeriods.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerAdapter } from \"../services/ngx-mat-timepicker-adapter\";\r\n\r\nexport const NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken<string>(\"TimeLocale\", {\r\n    providedIn: \"root\",\r\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\r\n});\r\n","import {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\r\nimport {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\r\nimport {NgxMatTimepickerDisabledConfig} from \"../models/ngx-mat-timepicker-disabled-config.interface\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n// @dynamic\r\nexport class NgxMatTimepickerUtils {\r\n\r\n    static disableHours(hours: NgxMatTimepickerClockFace[], config: NgxMatTimepickerDisabledConfig): NgxMatTimepickerClockFace[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({hour}).toFormat(NgxMatTimepickerFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\r\n                };\r\n            });\r\n        }\r\n\r\n        return hours;\r\n    }\r\n\r\n    static disableMinutes(minutes: NgxMatTimepickerClockFace[], selectedHour: number, config: NgxMatTimepickerDisabledConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = DateTime.fromObject({\r\n                    hour,\r\n                    minute: value.time\r\n                }).toFormat(NgxMatTimepickerFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"minutes\")\r\n                };\r\n            });\r\n        }\r\n\r\n        return minutes;\r\n    }\r\n\r\n    static getHours(format: number): NgxMatTimepickerClockFace[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    static getMinutes(gap = 1): NgxMatTimepickerClockFace[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n\r\n        return minutes;\r\n    }\r\n\r\n    static isDigit(e: KeyboardEvent) {\r\n        // Allow: backspace, delete, tab, escape, enter\r\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n            // Allow: Ctrl/cmd+A\r\n            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+C\r\n            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+X\r\n            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: home, end, left, right, up, down\r\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n            return true;\r\n        }\r\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n    }\r\n\r\n\r\n}\r\n","// COMPONENTS\r\nexport {NgxMatTimepickerFieldComponent} from \"./lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\r\nexport {NgxMatTimepickerToggleComponent} from \"./lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\r\n// DIRECTIVES\r\nexport {NgxMatTimepickerDirective} from \"./lib/directives/ngx-mat-timepicker.directive\";\r\nexport {NgxMatTimepickerToggleIconDirective} from \"./lib/directives/ngx-mat-timepicker-toggle-icon.directive\";\r\n// MODELS\r\nexport {NgxMatTimepickerConfig} from \"./lib/models/ngx-mat-timepicker-config.interface\";\r\n//\r\nexport * from \"./lib/ngx-mat-timepicker.module\";\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component} from \"@angular/core\";\r\n\r\ninterface Theme {\r\n    description: string;\r\n    value: string\r\n}\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class NgxMatTimepickerAppComponent {\r\n\r\n    githubLink: string = \"https://github.com/tonysamperi/ngx-mat-timepicker\";\r\n    selectedTheme: Theme;\r\n    selectedTime: string;\r\n    showInput: boolean = !0;\r\n    themes: Theme[] = [\r\n        {value: \"\", description: \"Light\"},\r\n        {value: \"dark-theme\", description: \"Dark\"}\r\n    ];\r\n\r\n    constructor() {\r\n        this.selectedTheme = this.themes[0];\r\n    }\r\n\r\n    updateTheme(theme: Theme): void {\r\n        this.selectedTheme = theme;\r\n        document.body.classList.toggle(\"dark-theme\", !!theme.value);\r\n    }\r\n\r\n}\r\n","<ng-template #fakeRadioButton>\r\n    <mat-icon> radio_button_unchecked</mat-icon>\r\n</ng-template>\r\n<mat-toolbar class=\"ngx-mtp-header mat-elevation-z6\"\r\n             color=\"primary\">\r\n    <div>\r\n        <img class=\"ngx-mtp-ng-logo\"\r\n             src=\"assets/angular-white-transparent.svg\"\r\n             alt=\"\" />\r\n        <span class=\"ngx-mtp-header-title\">ngx-mat-timepicker</span>\r\n    </div>\r\n    <div>\r\n        <button mat-button\r\n                [matMenuTriggerFor]=\"themeMenu\">\r\n            <mat-icon>format_color_fill</mat-icon>\r\n        </button>\r\n\r\n        <mat-menu #themeMenu>\r\n            <button mat-menu-item\r\n                    (click)=\"updateTheme(theme)\"\r\n                    *ngFor=\"let theme of themes\">\r\n                <mat-icon color=\"accent\"\r\n                          *ngIf=\"selectedTheme.value === theme.value; else fakeRadioButton\">radio_button_checked\r\n                </mat-icon>\r\n                {{theme.description}}\r\n                <mat-icon class=\"ngx-mtp-theme-example\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n                         width=\"100%\"\r\n                         height=\"100%\"\r\n                         viewBox=\"0 0 80 80\"\r\n                         fit=\"\"\r\n                         preserveAspectRatio=\"xMidYMid meet\"\r\n                         focusable=\"false\">\r\n                        <defs>\r\n                            <path d=\"M77.87 0C79.05 0 80 .95 80 2.13v75.74c0 1.17-.95 2.13-2.13 2.13H2.13C.96 80 0 79.04 0 77.87V2.13C0 .95.96 0 2.13 0h75.74z\"\r\n                                  id=\"a\"></path>\r\n                            <path d=\"M54 40c3.32 0 6 2.69 6 6 0 1.2 0-1.2 0 0 0 3.31-2.68 6-6 6H26c-3.31 0-6-2.69-6-6 0-1.2 0 1.2 0 0 0-3.31 2.69-6 6-6h28z\"\r\n                                  id=\"b\"></path>\r\n                            <path d=\"M0 0h80v17.24H0V0z\"\r\n                                  id=\"c\"></path>\r\n                        </defs>\r\n                        <use xlink:href=\"#a\"\r\n                             [attr.fill]=\"theme.value ? '#444': '#fff'\"\r\n                             class=\"docs-theme-icon-background\"></use>\r\n                        <use xlink:href=\"#b\"\r\n                             fill=\"#ff4081\"\r\n                             class=\"docs-theme-icon-button\"></use>\r\n                        <use xlink:href=\"#c\"\r\n                             fill=\"#3f51b5\"\r\n                             class=\"docs-theme-icon-toolbar\"></use>\r\n                    </svg>\r\n                </mat-icon>\r\n            </button>\r\n        </mat-menu>\r\n        <a mat-button\r\n           [href]=\"githubLink\">\r\n            <img src=\"assets/github-circle-white-transparent.svg\"\r\n                 class=\"ngx-mtp-github-logo\"\r\n                 alt=\"\" /> Github\r\n        </a>\r\n    </div>\r\n</mat-toolbar>\r\n<div class=\"ngx-mtp-top\">\r\n    <h1 class=\"mat-h1 ngx-mtp-main-title\">\r\n        Angular Material Timepicker\r\n    </h1>\r\n    <p>an Angular material 9+ extension to add time pickers!</p>\r\n    <div class=\"ngx-mtp-badges\">\r\n        <img src=\"https://img.shields.io/npm/v/ngx-mat-timepicker.svg?style=flat-square\"\r\n             alt=\"\" />\r\n        <img src=\"https://img.shields.io/npm/dm/ngx-mat-timepicker.svg?style=flat-square\"\r\n             alt=\"\" />\r\n        <img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\"\r\n             alt=\"\" />\r\n        <img src=\"https://travis-ci.com/tonysamperi/ngx-mat-timepicker.svg?branch=master\"\r\n             alt=\"\" />\r\n        <img src=\"https://img.shields.io/bundlephobia/min/ngx-mat-timepicker\"\r\n             alt=\"\" />\r\n    </div>\r\n    <div class=\"ngx-mtp-padding ngx-mtp-d-flex ngx-mtp-align-center ngx-mtp-justify-center\">\r\n        <a mat-raised-button\r\n           [href]=\"githubLink\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 width=\"24\"\r\n                 height=\"24\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 fill=\"none\"\r\n                 stroke=\"currentColor\"\r\n                 stroke-width=\"2\"\r\n                 stroke-linecap=\"round\"\r\n                 stroke-linejoin=\"round\"\r\n                 class=\"css-1oabto8\">\r\n                <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\r\n            </svg>\r\n            Star on Github\r\n        </a>\r\n    </div>\r\n</div>\r\n<div class=\"ngx-mtp-generic-section\">\r\n    <h2 class=\"mat-h2\">\r\n        Install NgxMatTimepicker\r\n    </h2>\r\n    <div class=\"terminal\">\r\n        <ul>\r\n            <li>npm i @popperjs/core</li>\r\n            <li>npm i ngx-popperjs</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n<div class=\"ngx-mtp-container\">\r\n    <form class=\"demo-form\">\r\n        <div>\r\n            <h2>Picker with 12h format</h2>\r\n            <p>using <span class=\"mat-color-primary\">default</span> palette (primary)</p>\r\n            <code-viewer>\r\n                <div class=\"example ngx-mtp-d-flex ngx-mtp-align-center ngx-mtp-flex-column\">\r\n                    <mat-form-field>\r\n                        <input matInput\r\n                               name=\"selected_time_A\"\r\n                               [(ngModel)]=\"selectedTime\"\r\n                               [ngxMatTimepicker]=\"pickerA\"\r\n                               placeholder=\"4:00 PM\"\r\n                               readonly />\r\n                    </mat-form-field>\r\n                    <ngx-mat-timepicker #pickerA></ngx-mat-timepicker>\r\n                </div>\r\n                <pre class=\"language-markup\">\r\n                    <code>\r\n&lt;mat-form-field&gt;\r\n    &lt;input matInput\r\n           name=\"selected_time_A\"\r\n           [(ngModel)]=\"selectedTime\"\r\n           [ngxMatTimepicker]=\"pickerA\"\r\n           placeholder=\"4:00 PM\"\r\n           readonly /&gt;\r\n&lt;/mat-form-field&gt;\r\n&lt;ngx-mat-timepicker #pickerA>&lt;/ngx-mat-timepicker&gt;\r\n                    </code>\r\n                </pre>\r\n            </code-viewer>\r\n        </div>\r\n        <div>\r\n            <h2>Picker with 24h format</h2>\r\n            <p>using <span class=\"mat-color-accent\">accent</span> palette</p>\r\n            <code-viewer>\r\n                <div class=\"example ngx-mtp-d-flex ngx-mtp-align-center ngx-mtp-flex-column\">\r\n                    <mat-form-field>\r\n                        <input matInput\r\n                               name=\"selected_time_B\"\r\n                               format=\"24\"\r\n                               [(ngModel)]=\"selectedTime\"\r\n                               [ngxMatTimepicker]=\"pickerB\"\r\n                               placeholder=\"16:00\"\r\n                               readonly />\r\n                    </mat-form-field>\r\n                    <ngx-mat-timepicker color=\"accent\"\r\n                                        #pickerB></ngx-mat-timepicker>\r\n                </div>\r\n                <pre class=\"language-markup\">\r\n                <code>\r\n&lt;mat-form-field&gt;\r\n    &lt;input matInput\r\n           name=\"selected_time_B\"\r\n           format=\"24\"\r\n           [(ngModel)]=\"selectedTime\"\r\n           [ngxMatTimepicker]=\"pickerB\"\r\n           placeholder=\"16:00\"\r\n           readonly /&gt;\r\n&lt;/mat-form-field&gt;\r\n&lt;ngx-mat-timepicker color=\"accent\"\r\n                    #pickerB>&lt;/ngx-mat-timepicker&gt;\r\n                </code>\r\n            </pre>\r\n            </code-viewer>\r\n        </div>\r\n        <div>\r\n            <h2>ngx-mat-timepicker-field</h2>\r\n            <p>using <span class=\"mat-color-warn\">warn</span> palette</p>\r\n            <code-viewer>\r\n                <div class=\"example ngx-mtp-d-flex ngx-mtp-align-center ngx-mtp-flex-column\">\r\n                    <ngx-mat-timepicker-field color=\"warn\"\r\n                                              [defaultTime]=\"'11:11 AM'\"></ngx-mat-timepicker-field>\r\n                </div>\r\n                <pre class=\"language-markup\">\r\n                    <code>\r\n&lt;ngx-mat-timepicker-field color=\"warn\"\r\n                          [defaultTime]=\"'11:11 AM'\">&lt;/ngx-mat-timepicker-field&gt;\r\n                    </code>\r\n                </pre>\r\n            </code-viewer>\r\n        </div>\r\n        <div>\r\n            <h2>Input with *ngIf</h2>\r\n            <p>using <strong>*ngIf</strong> to show/hide only the input, but not the ngx-mat-timepicker</p>\r\n            <p><small>Before v 9.0.3, inputs weren't detached when destroyed, so you needed to destroy the\r\n                ngx-mat-timepicker as well. Not anymore.</small></p>\r\n            <code-viewer>\r\n                <div class=\"example ngx-mtp-d-flex ngx-mtp-align-center ngx-mtp-flex-column\">\r\n                    <mat-form-field *ngIf=\"showInput\">\r\n                        <input matInput\r\n                               name=\"selected_time\"\r\n                               [format]=\"24\"\r\n                               [(ngModel)]=\"selectedTime\"\r\n                               [ngxMatTimepicker]=\"pickerC\"\r\n                               placeholder=\"12:00\"\r\n                               readonly />\r\n                    </mat-form-field>\r\n                    <button mat-raised-button\r\n                            class=\"ngx-mtp-margin-top ngx-mtp-margin-bottom ngx-mtp-d-inline-block\"\r\n                            (click)=\"showInput = !showInput\"\r\n                            color=\"primary\">\r\n                        {{showInput ? \"Destroy\" : \"Restore\"}} input\r\n                    </button>\r\n                    <div class=\"ngx-mtp-box-bordered\">\r\n                        <small>ngx-mat-timepicker is here</small>\r\n                        <ngx-mat-timepicker color=\"accent\"\r\n                                            #pickerC></ngx-mat-timepicker>\r\n                    </div>\r\n                </div>\r\n                <pre>\r\n                    <code>\r\n&lt;mat-form-field *ngIf=\"showInput\"&gt;\r\n    &lt;input matInput\r\n    name=\"selected_time\"\r\n    [format]=\"24\"\r\n    [(ngModel)]=\"selectedTime\"\r\n    [ngxMatTimepicker]=\"pickerC\"\r\n    placeholder=\"12:00\"\r\n    readonly /&gt;\r\n&lt;/mat-form-field&gt;\r\n&lt;button mat-raised-button\r\n        class=\"ngx-mtp-margin-top ngx-mtp-margin-bottom ngx-mtp-d-inline-block\"\r\n        (click)=\"showInput = !showInput\"\r\n        color=\"primary\"&gt;\r\n                        {{showInput ? \"Destroy\" : \"Restore\"}} input\r\n&lt;/button&gt;\r\n&lt;div class=\"ngx-mtp-box-bordered\"&gt;\r\n    &lt;small&gt;ngx-mat-timepicker is here&lt;/small&gt;\r\n    &lt;ngx-mat-timepicker color=\"accent\"\r\n                        #pickerC&gt;&lt;/ngx-mat-timepicker&gt;\r\n&lt;/div&gt;\r\n                    </code>\r\n                </pre>\r\n            </code-viewer>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\nimport {BrowserModule} from \"@angular/platform-browser\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {NgModule} from \"@angular/core\";\r\nimport {FormsModule} from \"@angular/forms\";\r\n// MATERIAL\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport {MatCardModule} from \"@angular/material/card\";\r\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\nimport {MatMenuModule} from \"@angular/material/menu\";\r\nimport {MatSelectModule} from \"@angular/material/select\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\r\n//\r\nimport {NgxMatTimepickerModule} from \"ngx-mat-timepicker\";\r\n//\r\nimport {NgxMatTimepickerAppComponent} from \"./app.component\";\r\nimport {CodeViewerComponent} from \"./code-viewer/code-viewer.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NgxMatTimepickerAppComponent,\r\n        CodeViewerComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        //\r\n        MatButtonModule,\r\n        MatCardModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        //\r\n        NgxMatTimepickerModule.setLocale(\"it-IT\")\r\n    ],\r\n    providers: [],\r\n    bootstrap: [NgxMatTimepickerAppComponent]\r\n})\r\nexport class NgxMatTimepickerAppModule {\r\n}\r\n","import {Component, OnInit, ViewEncapsulation} from \"@angular/core\";\n//\nimport * as Prism from \"prismjs\";\n\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: \"code-viewer\",\n    templateUrl: \"./code-viewer.component.html\",\n    styleUrls: [\"./code-viewer.component.scss\"],\n    encapsulation: ViewEncapsulation.None\n})\n// tslint:disable-next-line:naming-convention\nexport class CodeViewerComponent implements OnInit {\n\n    showCode: boolean = !1;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        const $code = document.querySelector(`code`);\n        if (!$code) {\n            return;\n        }\n        Prism.highlightElement($code);\n    }\n\n}\n","<mat-card class=\"code-viewer\">\n    <div class=\"code-viewer-header\">\n        <span>{{showCode ? \"Source\" : \"Example\"}}</span>\n        <button mat-icon-button\n                (click)=\"showCode = !showCode\"\n                matTooltip=\"{{showCode ? 'Hide' : 'Show'}} source\"\n                title=\"{{showCode ? 'Hide' : 'Show'}} source\">\n            <mat-icon>code</mat-icon>\n        </button>\n    </div>\n    <div class=\"code-viewer-pane\">\n        <div class=\"code-viewer-example\"\n             [class.hide]=\"showCode\">\n            <ng-content select=\".example\"></ng-content>\n        </div>\n        <div [class.hide]=\"!showCode\">\n            <ng-content select=\"pre\"></ng-content>\n        </div>\n    </div>\n</mat-card>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport { NgxMatTimepickerAppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(NgxMatTimepickerAppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}