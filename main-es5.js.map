{"version":3,"sources":["webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.ts","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.html","webpack:///ngx-mat-timepicker/src/lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts","webpack:///ngx-mat-timepicker/src/lib/directives/append-to-input.directive.ts","webpack:///ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-autofocus.directive.ts","webpack:///ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-theme.directive.ts","webpack:///ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker-toggle-icon.directive.ts","webpack:///ngx-mat-timepicker/src/lib/directives/ngx-mat-timepicker.directive.ts","webpack:///ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-format.enum.ts","webpack:///ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-measures.enum.ts","webpack:///ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-periods.enum.ts","webpack:///ngx-mat-timepicker/src/lib/models/ngx-mat-timepicker-units.enum.ts","webpack:///ngx-mat-timepicker/src/lib/ngx-mat-timepicker.module.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-active-hour.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-active-minute.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-minutes-formatter.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-parser.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts","webpack:///ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker-adapter.ts","webpack:///ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker-event.service.ts","webpack:///ngx-mat-timepicker/src/lib/services/ngx-mat-timepicker.service.ts","webpack:///ngx-mat-timepicker/src/lib/tokens/ngx-mat-timepicker-time-locale.token.ts","webpack:///ngx-mat-timepicker/src/lib/utils/ngx-mat-timepicker.utils.ts","webpack:///ngx-mat-timepicker/src/public-api.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["NgxMatTimepicker12HoursFaceComponent","changes","period","currentValue","hoursList","disableHours","min","minTime","max","maxTime","format","hourChange","onTimeSelected","selector","templateUrl","changeDetection","OnPush","NgxMatTimepicker24HoursFaceComponent","NgxMatTimepickerContentComponent","NgxMatTimepickerDialControlComponent","_timeParserPipe","focused","timeChanged","timeUnitChanged","unfocused","e","char","String","fromCharCode","keyCode","isTimeDisabledToChange","time","timeList","preventDefault","isDigit","_changeTimeByArrow","value","transform","timeUnit","event","unit","previousTime","next","_selectedTime","amount","substr","_addTime","minutesGap","isTimeUnavailable","updateTime","find","t","styleUrls","providers","currentTime","nextTime","isNumber","test","selectedTime","disabled","NgxMatTimepickerDialComponent","_locale","hourChanged","meridiems","locale","minuteChanged","periodChanged","_color","hour","minute","isHintVisible","hours","getHours","minutes","getMinutes","disableMinutes","newValue","changeTimeUnit","changeHour","showHint","hideHint","changeMinute","NgxMatTimepickerDialogComponent","data","_dialogRef","_timepickerSrv","_eventSrv","activeTimeUnit","HOUR","_subsCtrl$","color","defaultTime","_onTimeChange","close","complete","_defineTime","selectedHour","pipe","bufferSize","refCount","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","subscribe","_setDefaultTime","bind","hoursOnly","MINUTE","hourSelected","dispatchEvent","stopPropagation","timeSet","getFullTime","fromDateTimeToString","toLocaleTimeString","emit","setDefaultTimeIfAvailable","_defaultTime","changePeriod","onHourChange","onMinuteChange","setTime","encapsulation","None","roundAngle","angle","step","Math","round","countAngleByCords","x0","y0","x","y","currentAngle","CLOCK_HAND_STYLES","small","height","top","large","NgxMatTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","_setClockHandPosition","_addTouchEvents","faceTimeChanges","faceTime","selectedTimeChanges","setTimeout","_selectAvailableTime","_removeTouchEvents","_isStarted","MouseEvent","type","clockFaceCords","clockFace","nativeElement","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","_isInnerClockFace","angleStep","roundedAngle","val","_item_","_touchStartHandler","onMousedown","_touchEndHandler","onMouseup","addEventListener","clockHand","style","sqrt","pow","removeEventListener","isClockFaceDisabled","every","availableTime","_decreaseClockHand","_increaseClockHand","read","concatTime","NgxMatTimepickerControlComponent","_timeParser","id","nextId","_floatLabel","_changeTimeIfValid","_isSelectedTimeDisabled","_getAvailableTime","_getPrevAvailableTime","_getNextAvailableTime","_setAvailableTime","isFocused","_previousTime","key","increase","decrease","preventTyping","isNaN","timeString","length","fn","currentTimeIndex","findIndex","index","timeCollection","maxValue","i","onModelChange","onKeydown","changeTime","onFocus","onBlur","NgxMatTimepickerFieldComponent","_timepickerService","maxHour","minHour","AM","periods","PM","_format","_isFirstTimeChange","_onChange","h","_changeTime","minutesList","m","_initTime","isTimeRangeSet","hour$","clockTime","_selectedHour","_changeDefaultTimeValue","_updateAvailableMinutes","minute$","isChangePeriodDisabled","_isPeriodDisabled","_updateAvailableTime","_updateTime","_emitLocalTimeChange","_fn_","isDisabled","_resetTime","clockFaceTime","_isDefaultTime","timepickerTime","localTime","isDefaultTimeAvailable","isTimeAvailable","_updateAvailableHours","formattedTime","formatTime","isDynamicallyChanged","_previousFormat","_max","parseTime","_min","provide","useExisting","multi","onTimeSet","NgxMatTimepickerHoursFace","NgxMatTimepickerMinutesFaceComponent","minuteChange","NgxMatTimepickerPeriodComponent","timePeriod","isPeriodAvailable","_isSwitchPeriodAvailable","_getDisabledTimeByPeriod","Error","opacity","animations","NgxMatTimepickerToggleComponent","timepicker","open","_disabled","undefined","NgxMatTimepickerComponent","_dialog","_eventService","closed","isEsc","opened","panelClass","disableAnimation","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","appendToInput","theme","_ngxMatTimepickerTheme","timepickerClass","inputElement","afterClosed","input","_timepickerInput","element","_minutesGap","gap","floor","template","AppendToInputDirective","elementRef","renderer","_inputCords","inputCords","_direction","direction","append","bottom","defineElementYByDirection","setStyle","inputTop","inputBottom","offsetHeight","isElementFit","window","innerHeight","isTop","isCenter","NgxMatTimepickerAutofocusDirective","_element","document","_activeElement","activeElement","isFocusActive","focus","preventScroll","NgxMatTimepickerThemeDirective","setTheme","hasOwnProperty","prop","setProperty","camelCaseToDash","myStr","replace","toLowerCase","NgxMatTimepickerToggleIconDirective","NgxMatTimepickerDirective","_elementRef","_value","onTouched","disableClick","_timepicker","picker","registerInput","_registerTimepicker","_updateInputValue","isAvailable","console","warn","host","NgxMatTimepickerFormat","NgxMatTimepickerMeasure","NgxMatTimepickerPeriods","NgxMatTimepickerUnits","NgxMatTimepickerModule","ngModule","useValue","imports","exports","declarations","entryComponents","NgxMatTimepickerActiveHourPipe","currentHour","name","NgxMatTimepickerActiveMinutePipe","currentMinute","defaultGap","NgxMatTimepickerMinutesFormatterPipe","NgxMatTimepickerParserPipe","_numberingSystem","local","setLocale","resolvedLocaleOpts","numberingSystem","_parseTime","toString","timeMeasure","parsedTime","fromFormat","NgxMatTimepickerTimeFormatterPipe","fromObject","toFormat","NgxMatTimepickerTimeLocalizerPipe","isKeyboardEnabled","_formatTime","NgxMatTimepickerAdapter","opts","defaultLocale","toLocaleString","TIME_SIMPLE","hour12","defaultNumberingSistem","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","timeFormat","TWENTY_FOUR","TWELVE","reconfigure","before","after","isSameOrBefore","isSameOrAfter","compareWith","hasSame","valueOf","granularity","convertedTime","isAfter","isBefore","between","isBetween","_getLocaleOptionsByTime","isPeriodExist","split","timeMask","TWELVE_SHORT","TWENTY_FOUR_SHORT","defaultFormat","hourCycle","localeConfig","defaultConfig","parseInt","NgxMatTimepickerEventService","_backdropClick$","_keydownEvent$","asObservable","providedIn","DEFAULT_HOUR","DEFAULT_MINUTE","NgxMatTimepickerService","_hour$","_minute$","_period$","getValue","trim","error","toJSDate","fromJSDate","isValid","toUpperCase","formatHourByPeriod","isPeriodValid","NGX_MAT_TIMEPICKER_LOCALE","factory","NgxMatTimepickerUtils","config","map","formatHour","Array","fill","v","minutesCount","push","some","n","ctrlKey","metaKey","webpackEmptyAsyncContext","req","Promise","resolve","then","code","keys","module","NgxMatTimepickerAppComponent","themes","description","selectedTheme","body","classList","toggle","NgxMatTimepickerAppModule","bootstrap","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\r\n//\r\nimport {NgxMatTimepickerHoursFace} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-12-hours-face\",\r\n    templateUrl: \"ngx-mat-timepicker-12-hours-face.component.html\",\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.period && changes.period.currentValue) {\r\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerHoursFace } from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face\";\r\nimport { NgxMatTimepickerUtils } from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-24-hours-face\",\r\n    templateUrl: \"ngx-mat-timepicker-24-hours-face.component.html\",\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [selectedTime]=\"selectedHour\"\r\n                     [faceTime]=\"hoursList\"\r\n                     [format]=\"format\"\r\n                     (timeChange)=\"hourChange.next($event)\"\r\n                     (timeSelected)=\"onTimeSelected($event)\"></ngx-mat-timepicker-face>\r\n","import {Component, Input} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-content\",\r\n    templateUrl: \"./ngx-mat-timepicker-content.component.html\",\r\n})\r\nexport class NgxMatTimepickerContentComponent {\r\n\r\n    @Input() appendToInput: boolean;\r\n    @Input() inputElement: any;\r\n\r\n}\r\n","<div [ngxAppendToInput]=\"inputElement\" *ngIf=\"appendToInput;else timepickerModal\">\r\n    <ng-container *ngTemplateOutlet=\"timepickerOutlet\"></ng-container>\r\n</div>\r\n<ng-template #timepickerModal>\r\n    <ng-container *ngTemplateOutlet=\"timepickerOutlet\"></ng-container>\r\n</ng-template>\r\n<ng-template #timepickerOutlet>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerParserPipe} from \"../../pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dial-control\",\r\n    templateUrl: \"ngx-mat-timepicker-dial-control.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-dial-control.component.scss\"],\r\n    providers: [NgxMatTimepickerParserPipe]\r\n})\r\nexport class NgxMatTimepickerDialControlComponent {\r\n\r\n    private get _selectedTime(): NgxMatTimepickerClockFace {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    disabled: boolean;\r\n\r\n    @Output()\r\n    focused = new EventEmitter<null>();\r\n\r\n    @Input()\r\n    isActive: boolean;\r\n\r\n    @Input()\r\n    isEditable: boolean;\r\n\r\n    @Input()\r\n    minutesGap: number;\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input()\r\n    time: string;\r\n\r\n    @Output()\r\n    timeChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    @Input()\r\n    timeList: NgxMatTimepickerClockFace[];\r\n\r\n    @Input()\r\n    timeUnit: NgxMatTimepickerUnits;\r\n\r\n    @Output()\r\n    timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\r\n\r\n    @Output()\r\n    unfocused = new EventEmitter<null>();\r\n\r\n    constructor(private _timeParserPipe: NgxMatTimepickerParserPipe) {\r\n    }\r\n\r\n    changeTimeByKeyboard(e: any): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    onKeydown(e: any): void {\r\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\r\n            e.preventDefault();\r\n        }\r\n        else {\r\n            this._changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: NgxMatTimepickerUnits): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        if (this._selectedTime) {\r\n            this.timeChanged.next(this._selectedTime);\r\n            this.previousTime = this._selectedTime.time;\r\n        }\r\n    }\r\n\r\n    private _addTime(amount: number): string {\r\n        return `0${+this.time + amount}`.substr(-2);\r\n    }\r\n\r\n    private _changeTimeByArrow(keyCode: number): void {\r\n        let time: string;\r\n\r\n        // arrow up\r\n        if (keyCode === 38) {\r\n            time = this._addTime(this.minutesGap || 1);\r\n        }\r\n        // arrow down\r\n        else if (keyCode === 40) {\r\n            time = this._addTime(-1 * (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: NgxMatTimepickerClockFace[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: NgxMatTimepickerClockFace[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","<input class=\"timepicker-dial__control timepicker-dial__item\"\r\n       [ngClass]=\"{'active': isActive}\"\r\n       [ngModel]=\"time | timeLocalizer: timeUnit: true\"\r\n       (ngModelChange)=\"time = $event\"\r\n       [disabled]=\"disabled\"\r\n       (input)=\"updateTime()\"\r\n       (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n       readonly\r\n       [ngxMatTimepickerAutofocus]=\"isActive\"\r\n       *ngIf=\"!isEditable;else editableTemplate\">\r\n\r\n<ng-template #editableTemplate>\r\n    <input class=\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\"\r\n           [ngClass]=\"{'active': isActive}\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [disabled]=\"disabled\"\r\n           (input)=\"updateTime()\"\r\n           (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n           [ngxMatTimepickerAutofocus]=\"isActive\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTimeByKeyboard($event)\">\r\n</ng-template>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    TemplateRef\r\n} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime, Info} from \"luxon\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dial\",\r\n    templateUrl: \"ngx-mat-timepicker-dial.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-dial.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatTimepickerDialComponent implements OnChanges {\r\n\r\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() format: number;\r\n    @Input() hour: number | string;\r\n    @Output() hourChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    hours: NgxMatTimepickerClockFace[];\r\n    @Input() hoursOnly: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    isHintVisible: boolean;\r\n    @Input() maxTime: DateTime;\r\n    meridiems = Info.meridiems({locale: this._locale});\r\n    @Input() minTime: DateTime;\r\n    @Input() minute: number | string;\r\n    @Output() minuteChanged = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    minutes: NgxMatTimepickerClockFace[];\r\n    @Input() minutesGap: number;\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n\r\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n    @Output() timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    changeHour(hour: NgxMatTimepickerClockFace): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: NgxMatTimepickerClockFace): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const periodChanged = changes.period && changes.period.currentValue;\r\n        if (periodChanged || changes.format && changes.format.currentValue) {\r\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\r\n\r\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (periodChanged || changes.hour && changes.hour.currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n}\r\n","<div class=\"timepicker-dial\">\r\n    <div class=\"timepicker-dial__container\">\r\n        <div class=\"timepicker-dial__time\">\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\r\n                                         [time]=\"hour\"\r\n                                         [timeUnit]=\"timeUnit.HOUR\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeHour($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n            <span>:</span>\r\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\r\n                                         [time]=\"minute\"\r\n                                         [timeUnit]=\"timeUnit.MINUTE\"\r\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\r\n                                         [isEditable]=\"isEditable\"\r\n                                         [minutesGap]=\"minutesGap\"\r\n                                         [disabled]=\"hoursOnly\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (timeChanged)=\"changeMinute($event)\"\r\n                                         (focused)=\"showHint()\"\r\n                                         (unfocused)=\"hideHint()\">\r\n\r\n            </ngx-mat-timepicker-dial-control>\r\n        </div>\r\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\r\n                                   *ngIf=\"format !== 24\"\r\n                                   [selectedPeriod]=\"period\"\r\n                                   [activeTimeUnit]=\"activeTimeUnit\"\r\n                                   [maxTime]=\"maxTime\"\r\n                                   [minTime]=\"minTime\"\r\n                                   [format]=\"format\"\r\n                                   [hours]=\"hours\"\r\n                                   [minutes]=\"minutes\"\r\n                                   [selectedHour]=\"hour\"\r\n                                   [meridiems]=\"meridiems\"\r\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\r\n    </div>\r\n    <div *ngIf=\"isEditable || editableHintTmpl\"\r\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\r\n        <!--suppress HtmlUnknownAttribute -->\r\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\r\n        <ng-template #editableHintDefault>\r\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n","import {Component, HostListener, Inject, Input, OnDestroy, OnInit, ViewEncapsulation} from \"@angular/core\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\r\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\r\n//\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {shareReplay, takeUntil} from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-dialog\",\r\n    styleUrls: [\"./ngx-mat-timepicker-dialog.component.scss\"],\r\n    templateUrl: \"./ngx-mat-timepicker-dialog.component.html\",\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMatTimepickerDialogComponent implements OnInit, OnDestroy {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this._defaultTime = time;\r\n        this._setDefaultTime(time);\r\n    }\r\n\r\n    activeTimeUnit: NgxMatTimepickerUnits = NgxMatTimepickerUnits.HOUR;\r\n    selectedHour: Observable<NgxMatTimepickerClockFace>;\r\n    selectedMinute: Observable<NgxMatTimepickerClockFace>;\r\n    selectedPeriod: Observable<NgxMatTimepickerPeriods>;\r\n    timeUnit: typeof NgxMatTimepickerUnits = NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _defaultTime: string;\r\n    private _subsCtrl$ = new Subject();\r\n\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data: NgxMatTimepickerConfig,\r\n                protected _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent>,\r\n                private _timepickerSrv: NgxMatTimepickerService,\r\n                private _eventSrv: NgxMatTimepickerEventService,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n\r\n        this.color = data.color;\r\n        this.defaultTime = data.defaultTime;\r\n    }\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this._timepickerSrv.period = period;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    close(): void {\r\n        // this.data.timepickerBaseRef.close();\r\n        this._dialogRef.close();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._defineTime();\r\n        this.selectedHour = this._timepickerSrv.selectedHour\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.selectedMinute = this._timepickerSrv.selectedMinute\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\r\n        .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\r\n        .subscribe(this._setDefaultTime.bind(this));\r\n    }\r\n\r\n    onHourChange(hour: NgxMatTimepickerClockFace): void {\r\n        this._timepickerSrv.hour = hour;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        if (!this.data.hoursOnly) {\r\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\r\n        }\r\n        this.data.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n\r\n    @HostListener(\"keydown\", [\"$event\"])\r\n    onKeydown(e: any): void {\r\n        this._eventSrv.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    onMinuteChange(minute: NgxMatTimepickerClockFace): void {\r\n        this._timepickerSrv.minute = minute;\r\n        this._onTimeChange();\r\n    }\r\n\r\n    setTime(): void {\r\n        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));\r\n        this.close();\r\n    }\r\n\r\n    private _defineTime(): void {\r\n        const minTime = this.data.minTime;\r\n\r\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\r\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\r\n\r\n            this._setDefaultTime(time);\r\n        }\r\n    }\r\n\r\n    private _onTimeChange(): void {\r\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\r\n            locale: this._locale,\r\n            format: this.data.format\r\n        });\r\n\r\n        this.data.timepickerBaseRef.timeChanged.emit(time);\r\n    }\r\n\r\n    private _setDefaultTime(time: string): void {\r\n        this._timepickerSrv.setDefaultTimeIfAvailable(\r\n            time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\r\n    }\r\n\r\n}\r\n","<ng-template #cancelBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">CANCEL\r\n    </button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">OK\r\n    </button>\r\n</ng-template>\r\n<div mat-dialog-content>\r\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\r\n                                [inputElement]=\"data.inputElement\"\r\n                                [ngxMatTimepickerTheme]=\"data.theme\">\r\n        <div class=\"timepicker\"\r\n             [ngClass]=\"data.timepickerClass\">\r\n            <mat-toolbar [color]=\"color\"\r\n                         class=\"timepicker-header\">\r\n                <ngx-mat-timepicker-dial [color]=\"color\"\r\n                                         [format]=\"data.format\"\r\n                                         [hour]=\"(selectedHour | async)?.time\"\r\n                                         [minute]=\"(selectedMinute | async)?.time\"\r\n                                         [period]=\"selectedPeriod | async\"\r\n                                         [activeTimeUnit]=\"activeTimeUnit\"\r\n                                         [minTime]=\"data.minTime\"\r\n                                         [maxTime]=\"data.maxTime\"\r\n                                         [isEditable]=\"data.enableKeyboardInput\"\r\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\r\n                                         [minutesGap]=\"data.minutesGap\"\r\n                                         [hoursOnly]=\"data.hoursOnly\"\r\n                                         (periodChanged)=\"changePeriod($event)\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (hourChanged)=\"onHourChange($event)\"\r\n                                         (minuteChanged)=\"onMinuteChange($event)\"\r\n                ></ngx-mat-timepicker-dial>\r\n            </mat-toolbar>\r\n            <div class=\"timepicker__main-content\">\r\n                <div class=\"timepicker__body\"\r\n                     [ngSwitch]=\"activeTimeUnit\">\r\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\r\n                                                          [color]=\"color\"\r\n                                                          (hourChange)=\"onHourChange($event)\"\r\n                                                          [selectedHour]=\"selectedHour | async\"\r\n                                                          [minTime]=\"data.minTime\"\r\n                                                          [maxTime]=\"data.maxTime\"\r\n                                                          [format]=\"data.format\"\r\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\r\n                        <ng-template #ampmHours>\r\n                            <ngx-mat-timepicker-12-hours-face\r\n                                    [color]=\"color\"\r\n                                    (hourChange)=\"onHourChange($event)\"\r\n                                    [selectedHour]=\"selectedHour | async\"\r\n                                    [period]=\"selectedPeriod | async\"\r\n                                    [minTime]=\"data.minTime\"\r\n                                    [maxTime]=\"data.maxTime\"\r\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\r\n                        </ng-template>\r\n                    </div>\r\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                     [color]=\"color\"\r\n                                                     [selectedMinute]=\"selectedMinute | async\"\r\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\r\n                                                     [minTime]=\"data.minTime\"\r\n                                                     [maxTime]=\"data.maxTime\"\r\n                                                     [format]=\"data.format\"\r\n                                                     [period]=\"selectedPeriod | async\"\r\n                                                     [minutesGap]=\"data.minutesGap\"\r\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ngx-mat-timepicker-content>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <div (click)=\"close()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n    </div>\r\n    <div (click)=\"setTime()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n    </div>\r\n</div>","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\n\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    }\r\n    else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    }\r\n    else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    }\r\n    else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: \"75px\",\r\n        top: \"calc(50% - 75px)\"\r\n    },\r\n    large: {\r\n        height: \"103px\",\r\n        top: \"calc(50% - 103px)\"\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-face\",\r\n    templateUrl: \"./ngx-mat-timepicker-face.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-face.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild(\"clockFace\", {static: true}) clockFace: ElementRef;\r\n    @ViewChild(\"clockHand\", {static: true, read: ElementRef}) clockHand: ElementRef;\r\n\r\n    @Input()\r\n    color: ThemePalette = \"primary\";\r\n\r\n    @Input()\r\n    faceTime: NgxMatTimepickerClockFace[];\r\n\r\n    @Input()\r\n    format: number;\r\n\r\n    innerClockFaceSize = 85;\r\n    isClockFaceDisabled: boolean;\r\n\r\n    @Input()\r\n    minutesGap: number;\r\n\r\n    @Input()\r\n    selectedTime: NgxMatTimepickerClockFace;\r\n\r\n\r\n    @Output()\r\n    timeChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n\r\n    @Output()\r\n    timeSelected = new EventEmitter<number>();\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n\r\n    @Input()\r\n    unit: NgxMatTimepickerUnits;\r\n\r\n    private _isStarted: boolean;\r\n    private _touchEndHandler: () => any;\r\n    private _touchStartHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this._setClockHandPosition();\r\n        this._addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes.faceTime;\r\n        const selectedTimeChanges = changes.selectedTime;\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this._setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this._selectAvailableTime());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._removeTouchEvents();\r\n    }\r\n\r\n    @HostListener(\"mousedown\", [\"$event\"])\r\n    onMousedown(e: any) {\r\n        e.preventDefault();\r\n        this._isStarted = true;\r\n    }\r\n\r\n    @HostListener(\"mouseup\", [\"$event\"])\r\n    onMouseup(e: any) {\r\n        e.preventDefault();\r\n        this._isStarted = false;\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    @HostListener(\"touchmove\", [\"$event.changedTouches[0]\"])\r\n    @HostListener(\"touchend\", [\"$event.changedTouches[0]\"])\r\n    @HostListener(\"mousemove\", [\"$event\"])\r\n    selectTime(e: any): void {\r\n\r\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = roundAngle(circleAngle, angleStep);\r\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this._isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    trackByTime(_item_, time: NgxMatTimepickerClockFace): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    private _addTouchEvents(): void {\r\n        this._touchStartHandler = this.onMousedown.bind(this);\r\n        this._touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n\r\n    private _decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private _increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n\r\n    private _isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private _removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n\r\n    private _selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private _setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this._decreaseClockHand();\r\n            }\r\n            else {\r\n                this._increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n}\r\n","<ng-template #hourButton\r\n             let-time>\r\n    <button mat-mini-fab\r\n            class=\"mat-elevation-z0\"\r\n            [color]=\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\"\r\n            [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n            [disabled]=\"time.disabled\">\r\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\r\n    </button>\r\n</ng-template>\r\n<div class=\"clock-face\"\r\n     #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\"\r\n         class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\">\r\n            <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n        </div>\r\n        <div class=\"clock-face__inner\"\r\n             *ngIf=\"faceTime.length > 12\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\"\r\n                 [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\">\r\n                <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <mat-toolbar class=\"clock-face__clock-hand\"\r\n                 [color]=\"color\"\r\n                 [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n                 #clockHand\r\n                 [hidden]=\"isClockFaceDisabled\">\r\n        <button mat-mini-fab\r\n                *ngIf=\"unit === timeUnit.MINUTE\"\r\n                [color]=\"color\">\r\n            <span class=\"clock-face__clock-hand_minute_dot\"></span>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-toolbar class=\"clock-face__center\"\r\n                 [color]=\"color\"></mat-toolbar>\r\n</div>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n            <button mat-mini-fab\r\n                    class=\"mat-elevation-z0\"\r\n                    [disableRipple]=\"time.time % minutesGap !== 0\"\r\n                    [color]=\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\"\r\n                    [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\">\r\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\nimport {FloatLabelType} from \"@angular/material/form-field\";\r\n//\r\nimport {NgxMatTimepickerUnits} from \"../../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerParserPipe} from \"../../../pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerClockFace} from \"../../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUtils} from \"../../../utils/ngx-mat-timepicker.utils\";\r\n\r\nfunction concatTime(currentTime: string, nextTime: string): number {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n\r\n        return +time;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-time-control\",\r\n    templateUrl: \"./ngx-mat-timepicker-control.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-control.component.scss\"],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [NgxMatTimepickerParserPipe]\r\n})\r\n\r\nexport class NgxMatTimepickerControlComponent implements OnChanges {\r\n\r\n    static nextId: number = 0;\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input()\r\n    set floatLabel(newValue: FloatLabelType) {\r\n        this._floatLabel = newValue;\r\n    }\r\n\r\n    get floatLabel(): FloatLabelType {\r\n        return this._floatLabel;\r\n    }\r\n\r\n    id: number = NgxMatTimepickerControlComponent.nextId++;\r\n    isFocused: boolean;\r\n    @Input() max: number;\r\n    @Input() min: number;\r\n    @Input() placeholder: string;\r\n    @Input() preventTyping: boolean;\r\n\r\n    @Input() time: number;\r\n\r\n    @Output() timeChanged = new EventEmitter<number>();\r\n    @Input() timeList: NgxMatTimepickerClockFace[];\r\n    @Input() timeUnit: NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _floatLabel: FloatLabelType = \"never\";\r\n    private _previousTime: number;\r\n\r\n    constructor(private _timeParser: NgxMatTimepickerParserPipe) {\r\n    }\r\n\r\n    changeTime(event: any): void {\r\n        event.stopPropagation();\r\n\r\n        const char = String.fromCharCode(event.keyCode);\r\n        const time = concatTime(String(this.time), char);\r\n\r\n        this._changeTimeIfValid(time);\r\n    }\r\n\r\n    decrease(): void {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - 1;\r\n\r\n            if (previousTime < this.min) {\r\n                previousTime = this.max;\r\n            }\r\n\r\n            if (this._isSelectedTimeDisabled(previousTime)) {\r\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\r\n            }\r\n\r\n            if (previousTime !== this.time) {\r\n                this.timeChanged.emit(previousTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    increase(): void {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + 1;\r\n\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n\r\n            if (this._isSelectedTimeDisabled(nextTime)) {\r\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\r\n            }\r\n\r\n            if (nextTime !== this.time) {\r\n                this.timeChanged.emit(nextTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.timeList && this.time != null) {\r\n            if (this._isSelectedTimeDisabled(this.time)) {\r\n                this._setAvailableTime();\r\n            }\r\n        }\r\n    }\r\n\r\n    onBlur(): void {\r\n        this.isFocused = false;\r\n\r\n        if (this._previousTime !== this.time) {\r\n            this._changeTimeIfValid(+this.time);\r\n        }\r\n    }\r\n\r\n    onFocus(): void {\r\n        this.isFocused = true;\r\n        this._previousTime = this.time;\r\n    }\r\n\r\n    onKeydown(event: any): void {\r\n        event.stopPropagation();\r\n\r\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.key) {\r\n            case \"ArrowUp\":\r\n                this.increase();\r\n                break;\r\n            case \"ArrowDown\":\r\n                this.decrease();\r\n                break;\r\n        }\r\n\r\n        if (this.preventTyping && event.key !== \"Tab\") {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = +this._timeParser.transform(value, this.timeUnit);\r\n    }\r\n\r\n    private _changeTimeIfValid(value: number | undefined) {\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n\r\n            if (this.time > this.max) {\r\n                const timeString = String(value);\r\n                this.time = +timeString[timeString.length - 1];\r\n            }\r\n\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n    }\r\n\r\n    private _getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\r\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\r\n        const availableTime = fn(currentTimeIndex);\r\n\r\n        return availableTime != null ? availableTime : this.time;\r\n    }\r\n\r\n    private _getNextAvailableTime(index: number): number | undefined {\r\n        const timeCollection = this.timeList;\r\n        const maxValue = timeCollection.length;\r\n        for (let i = index + 1; i < maxValue; i++) {\r\n            const time = timeCollection[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPrevAvailableTime(index: number): number | undefined {\r\n        for (let i = index; i >= 0; i--) {\r\n            const time = this.timeList[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isSelectedTimeDisabled(time: number): boolean {\r\n        return this.timeList.find((faceTime: NgxMatTimepickerClockFace) => faceTime.time === time).disabled;\r\n    }\r\n\r\n    private _setAvailableTime(): void {\r\n        this.time = this.timeList.find(t => !t.disabled).time;\r\n        this.timeChanged.emit(this.time);\r\n    }\r\n}\r\n\r\n","<mat-form-field [color]=\"color\"\r\n                [floatLabel]=\"floatLabel\"\r\n                [ngClass]=\"{'active': isFocused}\"\r\n                class=\"ngx-mat-timepicker-control\">\r\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\r\n           name=\"ngx_mat_timepicker_field_{{id}}\"\r\n           matInput\r\n           maxlength=\"2\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [placeholder]=\"placeholder\"\r\n           [disabled]=\"disabled\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTime($event)\"\r\n           (focus)=\"onFocus()\"\r\n           (blur)=\"onBlur()\" />\r\n    <div class=\"arrows-wrap\"\r\n         matSuffix>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"increase()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\r\n            </svg>\r\n        </span>\r\n        <span class=\"ngx-mat-timepicker-control__arrow\"\r\n              role=\"button\"\r\n              (click)=\"decrease()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0V0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n            </svg>\r\n        </span>\r\n    </div>\r\n</mat-form-field>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    TemplateRef,\r\n    ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {MatSelectChange} from \"@angular/material/select\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\nimport {FloatLabelType} from \"@angular/material/form-field\";\r\n//\r\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {distinctUntilChanged, map, takeUntil, tap} from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-field\",\r\n    templateUrl: \"./ngx-mat-timepicker-field.component.html\",\r\n    styleUrls: [\"./ngx-mat-timepicker-field.component.scss\"],\r\n    providers: [\r\n        NgxMatTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerFieldComponent,\r\n            multi: true\r\n        }\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(val: string) {\r\n        this._defaultTime = val;\r\n        this._isDefaultTime = !!val;\r\n    }\r\n\r\n    get floatLabel(): FloatLabelType {\r\n        return this._floatLabel;\r\n    }\r\n\r\n    @Input()\r\n    set floatLabel(newValue: FloatLabelType) {\r\n        this._floatLabel = newValue;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this._updateTime(this.timepickerTime);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    @Input()\r\n    cancelBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    clockTheme: NgxMatTimepickerTheme;\r\n\r\n    @Input()\r\n    confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    controlOnly: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n    hour$: Observable<NgxMatTimepickerClockFace>;\r\n\r\n    hoursList: NgxMatTimepickerClockFace[];\r\n    isChangePeriodDisabled: boolean;\r\n    isTimeRangeSet: boolean;\r\n    maxHour = 12;\r\n    minHour = 1;\r\n    minute$: Observable<NgxMatTimepickerClockFace>;\r\n    minutesList: NgxMatTimepickerClockFace[];\r\n    period: NgxMatTimepickerPeriods = NgxMatTimepickerPeriods.AM;\r\n    periods: NgxMatTimepickerPeriods[] = [\r\n        NgxMatTimepickerPeriods.AM,\r\n        NgxMatTimepickerPeriods.PM\r\n    ];\r\n\r\n    @Output() timeChanged = new EventEmitter<string>();\r\n    timepickerTime: string;\r\n\r\n    timeUnit = NgxMatTimepickerUnits;\r\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _defaultTime: string;\r\n    private _floatLabel: FloatLabelType = \"never\";\r\n    private _format = 12;\r\n    private _isDefaultTime: boolean;\r\n    private _isFirstTimeChange: boolean = true;\r\n    private _max: string | DateTime;\r\n    private _min: string | DateTime;\r\n    private _previousFormat: number;\r\n    private _selectedHour: number;\r\n    private _subsCtrl$ = new Subject();\r\n\r\n    constructor(private _timepickerService: NgxMatTimepickerService,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    changeHour(hour: number): void {\r\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this._changeTime();\r\n    }\r\n\r\n    changeMinute(minute: number): void {\r\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this._changeTime();\r\n    }\r\n\r\n    changePeriod(event: MatSelectChange): void {\r\n        this._timepickerService.period = event.value as NgxMatTimepickerPeriods;\r\n        this._changeTime();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._initTime(this.defaultTime);\r\n\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\r\n        this.isTimeRangeSet = !!(this.min || this.max);\r\n\r\n        this.hour$ = this._timepickerService.selectedHour.pipe(\r\n            tap((clockTime: NgxMatTimepickerClockFace) => this._selectedHour = clockTime.time),\r\n            map(this._changeDefaultTimeValue.bind(this)),\r\n            tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())\r\n        ) as Observable<NgxMatTimepickerClockFace>;\r\n        this.minute$ = this._timepickerService.selectedMinute.pipe(\r\n            map(this._changeDefaultTimeValue.bind(this)),\r\n            tap(() => this._isFirstTimeChange = false)\r\n        ) as Observable<NgxMatTimepickerClockFace>;\r\n\r\n        if (this.format === 12) {\r\n            this._timepickerService.selectedPeriod.pipe(\r\n                distinctUntilChanged<NgxMatTimepickerPeriods>(),\r\n                tap((period: NgxMatTimepickerPeriods) => this.period = period),\r\n                tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)),\r\n                takeUntil(this._subsCtrl$)\r\n            ).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\r\n        }\r\n\r\n    }\r\n\r\n    onTimeSet(time: string): void {\r\n        this._updateTime(time);\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(_fn_: any): void {\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    writeValue(val: string): void {\r\n        if (val) {\r\n            this._initTime(val);\r\n        }\r\n        else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n\r\n    private _changeDefaultTimeValue(clockFaceTime: NgxMatTimepickerClockFace): NgxMatTimepickerClockFace {\r\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\r\n            return {...clockFaceTime, time: null};\r\n        }\r\n\r\n        return clockFaceTime;\r\n    }\r\n\r\n    private _changeTime(): void {\r\n        const time = this._timepickerService.getFullTime(this.format);\r\n        this.timepickerTime = time;\r\n\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n\r\n    private _emitLocalTimeChange(time: string): void {\r\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {format: this.format, locale: this._locale});\r\n\r\n        this._onChange(localTime);\r\n        this.timeChanged.emit(localTime);\r\n    }\r\n\r\n    private _initTime(time): void {\r\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\r\n        .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, \"minutes\", null, this.format);\r\n        if (!isDefaultTimeAvailable) {\r\n            if (this.min) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min as DateTime, this.format));\r\n\r\n                return;\r\n            }\r\n            if (this.max) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max as DateTime, this.format));\r\n\r\n                return;\r\n            }\r\n        }\r\n        this._updateTime(time);\r\n    }\r\n\r\n    private _isPeriodDisabled(period): boolean {\r\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: 12,\r\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\r\n        }).every(time => time.disabled);\r\n    }\r\n\r\n    private _onChange: (value: string) => void = () => {\r\n    }\r\n\r\n    private _resetTime(): void {\r\n        this._timepickerService.hour = {angle: 0, time: null};\r\n        this._timepickerService.minute = {angle: 0, time: null};\r\n    }\r\n\r\n    private _updateAvailableHours(): void {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n\r\n    private _updateAvailableMinutes(): void {\r\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\r\n            min: this.min as DateTime,\r\n            max: this.max as DateTime,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n\r\n    private _updateAvailableTime(): void {\r\n        this._updateAvailableHours();\r\n        if (this._selectedHour) {\r\n            this._updateAvailableMinutes();\r\n        }\r\n    }\r\n\r\n    private _updateTime(time: string): void {\r\n        if (time) {\r\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {locale: this._locale, format: this.format});\r\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\r\n            this.timepickerTime = formattedTime;\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"(hour$ | async)?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"(minute$ | async)?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    *ngIf=\"format !== 24\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [theme]=\"clockTheme\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n","import {EventEmitter, Input, Output} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n\r\nexport class NgxMatTimepickerHoursFace {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() format: number;\r\n    @Output() hourChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: NgxMatTimepickerClockFace[] = [];\r\n    @Input() maxTime: DateTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() selectedHour: NgxMatTimepickerClockFace;\r\n\r\n    protected _color: ThemePalette = \"primary\";\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-minutes-face\",\r\n    templateUrl: \"./ngx-mat-timepicker-minutes-face.component.html\"\r\n})\r\nexport class NgxMatTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    @Input() format: number;\r\n    @Input() maxTime: DateTime;\r\n    @Input() minTime: DateTime;\r\n\r\n    @Output() minuteChange = new EventEmitter<NgxMatTimepickerClockFace>();\r\n    @Input() minutesGap: number;\r\n\r\n    minutesList: NgxMatTimepickerClockFace[] = [];\r\n    @Input() period: NgxMatTimepickerPeriods;\r\n    @Input() selectedHour: number;\r\n\r\n    @Input() selectedMinute: NgxMatTimepickerClockFace;\r\n    timeUnit = NgxMatTimepickerUnits;\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.period && changes.period.currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","<ngx-mat-timepicker-face [color]=\"color\"\r\n                     [faceTime]=\"minutesList\"\r\n                     [selectedTime]=\"selectedMinute\"\r\n                     [minutesGap]=\"minutesGap\"\r\n                     (timeChange)=\"minuteChange.next($event)\"\r\n                     [unit]=\"timeUnit.MINUTE\"></ngx-mat-timepicker-face>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\n//\r\nimport { NgxMatTimepickerPeriods } from '../../models/ngx-mat-timepicker-periods.enum';\r\nimport { NgxMatTimepickerUnits } from '../../models/ngx-mat-timepicker-units.enum';\r\nimport { NgxMatTimepickerClockFace } from '../../models/ngx-mat-timepicker-clock-face.interface';\r\nimport { NgxMatTimepickerUtils } from '../../utils/ngx-mat-timepicker.utils';\r\n//\r\nimport { DateTime } from 'luxon';\r\n\r\n@Component({\r\n    selector: 'ngx-mat-timepicker-period',\r\n    templateUrl: 'ngx-mat-timepicker-period.component.html',\r\n    styleUrls: ['ngx-mat-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMatTimepickerPeriodComponent {\r\n\r\n    timePeriod = NgxMatTimepickerPeriods;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: NgxMatTimepickerPeriods;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\r\n    @Input() hours: NgxMatTimepickerClockFace[];\r\n    @Input() minutes: NgxMatTimepickerClockFace[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n    @Input() meridiems: string[];\r\n\r\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\r\n\r\n    changePeriod(period: NgxMatTimepickerPeriods): void {\r\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private _isSwitchPeriodAvailable(period: NgxMatTimepickerPeriods): boolean {\r\n        const time = this._getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private _getDisabledTimeByPeriod(period: NgxMatTimepickerPeriods): NgxMatTimepickerClockFace[] {\r\n        switch (this.activeTimeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such NgxMatTimepickerUnits');\r\n        }\r\n    }\r\n}\r\n","<div class=\"timepicker-period\">\r\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\r\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.AM}\"\r\n            (click)=\"changePeriod(timePeriod.AM)\"\r\n            type=\"button\">{{meridiems[0]}}</button>\r\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\r\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.PM}\"\r\n            (click)=\"changePeriod(timePeriod.PM)\"\r\n            type=\"button\">{{meridiems[1]}}</button>\r\n    <div class=\"timepicker-period__warning\"\r\n         [@scaleInOut]\r\n         (@scaleInOut.done)=\"animationDone()\"\r\n         *ngIf=\"!isPeriodAvailable\">\r\n        <p>Current time would be invalid in this period.</p>\r\n    </div>\r\n</div>\r\n","import {Component, ContentChild, Input} from \"@angular/core\";\r\nimport {NgxMatTimepickerToggleIconDirective} from \"../../directives/ngx-mat-timepicker-toggle-icon.directive\";\r\nimport {NgxMatTimepickerComponent} from \"../ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker-toggle\",\r\n    templateUrl: \"ngx-mat-timepicker-toggle.component.html\",\r\n    styleUrls: [\"ngx-mat-timepicker-toggle.component.scss\"]\r\n})\r\n\r\nexport class NgxMatTimepickerToggleComponent {\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    @ContentChild(NgxMatTimepickerToggleIconDirective, {static: true}) customIcon: NgxMatTimepickerToggleIconDirective;\r\n\r\n    @Input(\"for\") timepicker: NgxMatTimepickerComponent;\r\n\r\n    private _disabled: boolean;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","<button class=\"ngx-mat-timepicker-toggle mat-elevation-z0\"\r\n        color=\"\"\r\n        mat-mini-fab\r\n        (click)=\"open($event)\"\r\n        [disabled]=\"disabled\"\r\n        type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n         viewBox=\"0 0 24 24\"\r\n         width=\"24px\"\r\n         height=\"24px\"\r\n         *ngIf=\"!customIcon\">\r\n        <path d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\" />\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMatTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n","import {Component, EventEmitter, Input, Output, TemplateRef} from \"@angular/core\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\r\nimport {NgxMatTimepickerDirective} from \"../../directives/ngx-mat-timepicker.directive\";\r\nimport {NgxMatTimepickerRef} from \"../../models/ngx-mat-timepicker-ref.interface\";\r\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {merge, Subject} from \"rxjs\";\r\nimport {filter, takeUntil} from \"rxjs/operators\";\r\nimport {NgxMatTimepickerDialogComponent} from \"../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\r\n\r\n@Component({\r\n    selector: \"ngx-mat-timepicker\",\r\n    template: \"\",\r\n})\r\nexport class NgxMatTimepickerComponent implements NgxMatTimepickerRef {\r\n\r\n    @Input()\r\n    set color(newValue: ThemePalette) {\r\n        this._color = newValue;\r\n    }\r\n\r\n    get color(): ThemePalette {\r\n        return this._color;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this._timepickerInput && this._timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get inputElement(): any {\r\n        return this._timepickerInput && this._timepickerInput.element;\r\n    }\r\n\r\n    get maxTime(): DateTime {\r\n        return this._timepickerInput ? (this._timepickerInput.max as DateTime) : this.max;\r\n    }\r\n\r\n    get minTime(): DateTime {\r\n        return this._timepickerInput ? (this._timepickerInput.min as DateTime) : this.min;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get time(): string {\r\n        return this._timepickerInput && this._timepickerInput.value;\r\n    }\r\n\r\n    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme) {\r\n        this._ngxMatTimepickerTheme = newValue;\r\n    }\r\n\r\n    @Input() appendToInput: boolean;\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Output() closed = new EventEmitter<void>();\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input() defaultTime: string;\r\n    @Input() disableAnimation: boolean;\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() enableKeyboardInput: boolean;\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n    @Input() hoursOnly = false;\r\n    @Input() isEsc = true;\r\n    @Input() max: DateTime;\r\n    @Input() min: DateTime;\r\n    @Output() opened = new EventEmitter<void>();\r\n    @Input() preventOverlayClick: boolean;\r\n    @Input() theme: NgxMatTimepickerTheme;\r\n    @Output() timeChanged = new EventEmitter<string>();\r\n    @Input() timepickerClass: string;\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    timeUpdated = new Subject<string>(); // used in the dialog, check if a better approach can be used\r\n\r\n    private _color: ThemePalette = \"primary\";\r\n    private _format: number;\r\n    private _minutesGap: number;\r\n    private _ngxMatTimepickerTheme: NgxMatTimepickerTheme;\r\n    private _timepickerInput: NgxMatTimepickerDirective;\r\n\r\n    constructor(private _dialog: MatDialog,\r\n                private _eventService: NgxMatTimepickerEventService) {\r\n    }\r\n\r\n    open(): void {\r\n        this._dialog.open(NgxMatTimepickerDialogComponent, {\r\n            panelClass: \"ngx-mat-timepicker-dialog\",\r\n            data: {\r\n                timepickerBaseRef: this,\r\n                time: this.time,\r\n                defaultTime: this.defaultTime,\r\n                maxTime: this.maxTime,\r\n                minTime: this.minTime,\r\n                format: this.format,\r\n                minutesGap: this.minutesGap,\r\n                disableAnimation: this.disableAnimation,\r\n                cancelBtnTmpl: this.cancelBtnTmpl,\r\n                confirmBtnTmpl: this.confirmBtnTmpl,\r\n                editableHintTmpl: this.editableHintTmpl,\r\n                disabled: this.disabled,\r\n                enableKeyboardInput: this.enableKeyboardInput,\r\n                preventOverlayClick: this.preventOverlayClick,\r\n                appendToInput: this.appendToInput,\r\n                hoursOnly: this.hoursOnly,\r\n                theme: this.theme || this._ngxMatTimepickerTheme,\r\n                timepickerClass: this.timepickerClass,\r\n                inputElement: this.inputElement,\r\n                color: this.color\r\n            }\r\n        })\r\n        .afterClosed()\r\n        .subscribe(() => {\r\n            this.closed.emit();\r\n        });\r\n        this.opened.emit();\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: NgxMatTimepickerDirective): void {\r\n        if (this._timepickerInput) {\r\n            throw Error(\"A Timepicker can only be associated with a single input.\");\r\n        }\r\n        this._timepickerInput = input;\r\n    }\r\n\r\n    updateTime(time: string): void {\r\n        this.timeUpdated.next(time);\r\n    }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\r\n\r\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\r\n\r\n@Directive({\r\n    selector: '[ngxAppendToInput]'\r\n})\r\nexport class AppendToInputDirective implements AfterViewInit {\r\n\r\n    @Input('ngxAppendToInput') inputElement: any;\r\n\r\n    private _direction: TimepickerDirection;\r\n    private _inputCords: ClientRect;\r\n    private readonly element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef<HTMLElement>,\r\n                private renderer: Renderer2) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    private get inputCords(): ClientRect {\r\n        return this.inputElement.getBoundingClientRect();\r\n    }\r\n\r\n    private get direction(): TimepickerDirection {\r\n        const height = this.element.offsetHeight;\r\n        const {bottom, top} = this._inputCords;\r\n        const isElementFit = (window && window.innerHeight) - bottom < height;\r\n        const isTop = isElementFit && top > height;\r\n        const isCenter = isElementFit && top < height;\r\n\r\n        if (isTop) {\r\n            return 'top';\r\n        } else if (isCenter) {\r\n            return 'center';\r\n        }\r\n        return 'bottom';\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this._inputCords = this.inputCords;\r\n        this._direction = this.direction;\r\n\r\n        this.append();\r\n    }\r\n\r\n    @HostListener('window:scroll')\r\n    changePosition(): void {\r\n        const {bottom, top} = this.inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n\r\n    private append(): void {\r\n        const {left, bottom, top} = this._inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n\r\n        this.setStyle('position', 'fixed');\r\n        this.setStyle('left', `${left}px`);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n\r\n    private setStyle(style: string, value: string): void {\r\n        this.renderer.setStyle(this.element, style, value);\r\n    }\r\n\r\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\r\n        if (this._direction === 'top') {\r\n            return inputTop - this.element.offsetHeight;\r\n        } else if (this._direction === 'center') {\r\n            return inputTop - (this.element.offsetHeight / 2);\r\n        }\r\n        return inputBottom;\r\n    }\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from \"@angular/core\";\r\nimport {DOCUMENT} from \"@angular/common\";\r\n\r\n@Directive({\r\n    selector: \"[ngxMatTimepickerAutofocus]\"\r\n})\r\nexport class NgxMatTimepickerAutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input(\"ngxMatTimepickerAutofocus\") isFocusActive: boolean;\r\n\r\n    private _activeElement: HTMLElement;\r\n\r\n    constructor(private _element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this._activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\n","import {AfterViewInit, Directive, ElementRef, Input} from \"@angular/core\";\r\nimport {NgxMatTimepickerTheme} from \"../models/ngx-mat-timepicker-theme.interface\";\r\n\r\n@Directive({selector: \"[ngxMatTimepickerTheme]\"})\r\nexport class NgxMatTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input(\"ngxMatTimepickerTheme\")\r\n    theme: NgxMatTimepickerTheme;\r\n\r\n    private _element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this._element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === \"string\") {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this._element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n}\r\n","import {Directive} from \"@angular/core\";\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: \"[ngxMatTimepickerToggleIcon]\"})\r\n\r\nexport class NgxMatTimepickerToggleIconDirective {\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from \"@angular/core\";\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {ThemePalette} from \"@angular/material/core\";\r\n//\r\nimport {NgxMatTimepickerComponent} from \"../components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\nimport {Subject} from \"rxjs\";\r\nimport {takeUntil} from \"rxjs/operators\";\r\n\r\n@Directive({\r\n    selector: \"[ngxMatTimepicker]\",\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerDirective,\r\n            multi: true\r\n        }\r\n    ],\r\n    // tslint:disable-next-line:no-host-metadata-property\r\n    host: {\r\n        \"[disabled]\": \"disabled\",\r\n        // \"(change)\": \"updateValue($event.target.value)\",\r\n        \"(blur)\": \"onTouched()\",\r\n    },\r\n})\r\nexport class NgxMatTimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    get element(): any {\r\n        return this._elementRef && this._elementRef.nativeElement;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\r\n\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    @Input(\"ngxMatTimepicker\")\r\n    set timepicker(picker: NgxMatTimepickerComponent) {\r\n        this._registerTimepicker(picker);\r\n    }\r\n\r\n    get value(): string {\r\n        if (!this._value) {\r\n            return \"\";\r\n        }\r\n\r\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this._locale});\r\n    }\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = \"\";\r\n            this._updateInputValue();\r\n\r\n            return;\r\n        }\r\n        const time = NgxMatTimepickerAdapter.formatTime(value, {locale: this._locale, format: this.format});\r\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(\r\n            time,\r\n            this._min as DateTime,\r\n            this._max as DateTime,\r\n            \"minutes\",\r\n            this._timepicker.minutesGap,\r\n            this._format\r\n        );\r\n\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this._updateInputValue();\r\n\r\n            return;\r\n        }\r\n        console.warn(\"Selected time doesn't match min or max value\");\r\n    }\r\n\r\n    private set _defaultTime(time: string) {\r\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\r\n            locale: this._locale,\r\n            format: this.format\r\n        });\r\n    }\r\n\r\n    @Input()\r\n    disableClick: boolean;\r\n\r\n    @Input()\r\n    disabled: boolean;\r\n\r\n    private _format = 12;\r\n    private _max: string | DateTime;\r\n    private _min: string | DateTime;\r\n    private _previousFormat: number;\r\n    private _subsCtrl$: Subject<void> = new Subject<void>();\r\n    private _timepicker: NgxMatTimepickerComponent;\r\n    private _value: string = \"\";\r\n\r\n    constructor(private _elementRef: ElementRef,\r\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.value && changes.value.currentValue) {\r\n            this._defaultTime = changes.value.currentValue;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    @HostListener(\"change\")\r\n    updateValue(value: string) {\r\n        this.value = value;\r\n        this._onChange(value);\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        if (value) {\r\n            this._defaultTime = value;\r\n        }\r\n    }\r\n\r\n    private _onChange: (value: any) => void = () => {\r\n    }\r\n\r\n    private _registerTimepicker(picker: NgxMatTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this._timepicker.timeSet\r\n                .pipe(takeUntil(this._subsCtrl$))\r\n                .subscribe((time: string) => {\r\n                    this.value = time;\r\n                    this._onChange(this.value);\r\n                    this.onTouched();\r\n                    this._defaultTime = this._value;\r\n                });\r\n        }\r\n        else {\r\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\r\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\r\n        }\r\n    }\r\n\r\n    private _updateInputValue(): void {\r\n        this._elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","export enum NgxMatTimepickerFormat {\r\n    TWELVE = \"hh:mm a\",\r\n    TWELVE_SHORT = \"h:m a\",\r\n    TWENTY_FOUR = \"HH:mm\",\r\n    TWENTY_FOUR_SHORT = \"H:m\"\r\n}\r\n","export enum NgxMatTimepickerMeasure {\r\n    hour = \"hour\",\r\n    minute = \"minute\"\r\n}\r\n","export enum NgxMatTimepickerPeriods {\r\n    AM = \"AM\",\r\n    PM = \"PM\"\r\n}\r\n","export enum NgxMatTimepickerUnits {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {FormsModule} from \"@angular/forms\";\r\n// MATERIAL\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\nimport {MatSelectModule} from \"@angular/material/select\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\n// MAT-TIMEPICKER\r\nimport {NgxMatTimepickerComponent} from \"./components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\r\nimport {NgxMatTimepickerToggleComponent} from \"./components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\r\nimport {NgxMatTimepickerDirective} from \"./directives/ngx-mat-timepicker.directive\";\r\nimport {NgxMatTimepickerToggleIconDirective} from \"./directives/ngx-mat-timepicker-toggle-icon.directive\";\r\nimport {NgxMatTimepickerThemeDirective} from \"./directives/ngx-mat-timepicker-theme.directive\";\r\nimport {\r\n    NgxMatTimepicker24HoursFaceComponent\r\n} from \"./components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component\";\r\nimport {\r\n    NgxMatTimepicker12HoursFaceComponent\r\n} from \"./components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component\";\r\nimport {\r\n    NgxMatTimepickerMinutesFaceComponent\r\n} from \"./components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component\";\r\nimport {NgxMatTimepickerFaceComponent} from \"./components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component\";\r\nimport {NgxMatTimepickerDialComponent} from \"./components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component\";\r\nimport {\r\n    NgxMatTimepickerDialControlComponent\r\n} from \"./components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component\";\r\nimport {NgxMatTimepickerPeriodComponent} from \"./components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component\";\r\nimport {NgxMatTimepickerTimeFormatterPipe} from \"./pipes/ngx-mat-timepicker-time-formatter.pipe\";\r\nimport {NgxMatTimepickerMinutesFormatterPipe} from \"./pipes/ngx-mat-timepicker-minutes-formatter.pipe\";\r\nimport {NgxMatTimepickerAutofocusDirective} from \"./directives/ngx-mat-timepicker-autofocus.directive\";\r\nimport {NgxMatTimepickerFieldComponent} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\r\nimport {\r\n    NgxMatTimepickerControlComponent\r\n} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component\";\r\nimport {NgxMatTimepickerTimeLocalizerPipe} from \"./pipes/ngx-mat-timepicker-time-localizer.pipe\";\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"./tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerParserPipe} from \"./pipes/ngx-mat-timepicker-parser.pipe\";\r\nimport {NgxMatTimepickerActiveHourPipe} from \"./pipes/ngx-mat-timepicker-active-hour.pipe\";\r\nimport {NgxMatTimepickerActiveMinutePipe} from \"./pipes/ngx-mat-timepicker-active-minute.pipe\";\r\nimport {\r\n    NgxMatTimepickerContentComponent\r\n} from \"./components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component\";\r\nimport {NgxMatTimepickerDialogComponent} from \"./components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\r\nimport {AppendToInputDirective} from \"./directives/append-to-input.directive\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatDialogModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n        MatIconModule\r\n    ],\r\n    exports: [\r\n        NgxMatTimepickerComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerToggleIconDirective,\r\n    ],\r\n    declarations: [\r\n        NgxMatTimepickerDialogComponent,\r\n        NgxMatTimepickerActiveHourPipe,\r\n        NgxMatTimepickerActiveMinutePipe,\r\n        AppendToInputDirective,\r\n        NgxMatTimepickerComponent,\r\n        NgxMatTimepicker24HoursFaceComponent,\r\n        NgxMatTimepicker12HoursFaceComponent,\r\n        NgxMatTimepickerMinutesFaceComponent,\r\n        NgxMatTimepickerFaceComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepickerDialComponent,\r\n        NgxMatTimepickerDialControlComponent,\r\n        NgxMatTimepickerPeriodComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerToggleIconDirective,\r\n        NgxMatTimepickerAutofocusDirective,\r\n        NgxMatTimepickerMinutesFormatterPipe,\r\n        NgxMatTimepickerThemeDirective,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerControlComponent,\r\n        NgxMatTimepickerParserPipe,\r\n        NgxMatTimepickerContentComponent,\r\n        NgxMatTimepickerTimeFormatterPipe,\r\n        NgxMatTimepickerTimeLocalizerPipe\r\n    ],\r\n    entryComponents: [\r\n        NgxMatTimepickerDialogComponent\r\n    ]\r\n})\r\nexport class NgxMatTimepickerModule {\r\n\r\n    static setLocale(locale: string): ModuleWithProviders<NgxMatTimepickerModule> {\r\n        return {\r\n            ngModule: NgxMatTimepickerModule,\r\n            providers: [\r\n                {provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale}\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeHour'\r\n})\r\nexport class NgxMatTimepickerActiveHourPipe implements PipeTransform {\r\n\r\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n\r\n        return hour === currentHour;\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeMinute'\r\n})\r\nexport class NgxMatTimepickerActiveMinutePipe implements PipeTransform {\r\n\r\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class NgxMatTimepickerMinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Inject, Injectable, Pipe, PipeTransform} from \"@angular/core\";\r\n//\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\r\n//\r\nimport {DateTime, NumberingSystem} from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"ngxMatTimepickerParser\"\r\n})\r\n@Injectable()\r\nexport class NgxMatTimepickerParserPipe implements PipeTransform {\r\n\r\n    private readonly _numberingSystem: NumberingSystem;\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\r\n    }\r\n\r\n    transform(time: string | number, timeUnit = NgxMatTimepickerUnits.HOUR): string {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        if (!isNaN(+time)) {\r\n            return `${time}`;\r\n        }\r\n\r\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\r\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\r\n        }\r\n\r\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\r\n    }\r\n\r\n    private _parseTime(time: string | number, format: string, timeMeasure: NgxMatTimepickerMeasure): number {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this._numberingSystem})[timeMeasure];\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerUnits } from \"../models/ngx-mat-timepicker-units.enum\";\r\n//\r\nimport { DateTime } from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"timeFormatter\"\r\n})\r\nexport class NgxMatTimepickerTimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits): any {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return DateTime.fromObject({hour: +time}).toFormat(\"HH\");\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return DateTime.fromObject({minute: +time}).toFormat(\"mm\");\r\n            default:\r\n                throw new Error(\"no such time unit\");\r\n        }\r\n    }\r\n\r\n}\r\n","import {Inject, Pipe, PipeTransform} from \"@angular/core\";\r\n//\r\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\r\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\r\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n@Pipe({\r\n    name: \"timeLocalizer\"\r\n})\r\nexport class NgxMatTimepickerTimeLocalizerPipe implements PipeTransform {\r\n\r\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\r\n    }\r\n\r\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits, isKeyboardEnabled = false): string {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR: {\r\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\r\n\r\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\r\n            }\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n\r\n    private _formatTime(timeMeasure: NgxMatTimepickerMeasure, time: string | number, format: string): string {\r\n        try {\r\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this._locale).toFormat(format);\r\n        } catch {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\r\n        }\r\n    }\r\n}\r\n","import {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\r\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\r\nimport {NgxMatTimepickerOptions} from \"../models/ngx-mat-timepicker-options.interface\";\r\n//\r\nimport {DateTime, LocaleOptions, NumberingSystem} from \"luxon\";\r\n\r\n// @dynamic\r\nexport class NgxMatTimepickerAdapter {\r\n\r\n    static defaultFormat = 12;\r\n    static defaultLocale = \"en-US\";\r\n    static defaultNumberingSistem: NumberingSystem = \"latn\";\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: NgxMatTimepickerPeriods): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\r\n            return 0;\r\n        }\r\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n\r\n        return hour;\r\n    }\r\n\r\n    static formatTime(time: string, opts: NgxMatTimepickerOptions): string {\r\n        if (!time) {\r\n            return \"Invalid Time\";\r\n        }\r\n        const {format} = opts;\r\n        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);\r\n\r\n        if (format !== 24) {\r\n            return parsedTime.toLocaleString({\r\n                ...DateTime.TIME_SIMPLE,\r\n                hour12: format !== 24,\r\n                numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem\r\n            }).replace(/\\u200E/g, \"\");\r\n        }\r\n\r\n        return parsedTime.toISOTime({\r\n            includeOffset: false,\r\n            suppressMilliseconds: true,\r\n            suppressSeconds: true\r\n        }).replace(/\\u200E/g, \"\");\r\n    }\r\n\r\n    static fromDateTimeToString(time: DateTime, format: number): string {\r\n        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;\r\n\r\n        return time.reconfigure({\r\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\r\n            locale: NgxMatTimepickerAdapter.defaultLocale\r\n        }).toFormat(timeFormat);\r\n    }\r\n\r\n    static isBetween(time: DateTime, before: DateTime, after: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);\r\n        }\r\n    }\r\n\r\n    static isSameOrAfter(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return time.hour >= compareWith.hour;\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    static isSameOrBefore(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\r\n        if (unit === \"hours\") {\r\n            return time.hour <= compareWith.hour;\r\n        }\r\n        if (unit === \"minutes\") {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    static isTimeAvailable(time: string,\r\n                           min?: DateTime,\r\n                           max?: DateTime,\r\n                           granularity?: \"hours\" | \"minutes\",\r\n                           minutesGap?: number | null,\r\n                           format?: number): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.parseTime(time, {format});\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && this.isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && this.isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && this.isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n\r\n    static parseTime(time: string, opts: NgxMatTimepickerOptions): DateTime {\r\n        const {numberingSystem, locale} = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);\r\n        const isPeriodExist = time.split(\" \").length === 2;\r\n        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\r\n    }\r\n\r\n    static toLocaleTimeString(time: string, opts: NgxMatTimepickerOptions = {}): string {\r\n        const {format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale} = opts;\r\n        const hourCycle = format === 24 ? \"h23\" : \"h12\";\r\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\r\n        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\r\n    }\r\n\r\n    private static _getLocaleOptionsByTime(time: string, opts: NgxMatTimepickerOptions): LocaleOptions {\r\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\r\n        const localeConfig: LocaleOptions = {\r\n            numberingSystem: numberingSystem as NumberingSystem,\r\n            locale\r\n        };\r\n        const defaultConfig: LocaleOptions = {\r\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\r\n            locale: NgxMatTimepickerAdapter.defaultLocale\r\n        };\r\n\r\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\r\n    }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\n//\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {shareReplay} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class NgxMatTimepickerEventService {\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this._backdropClick$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this._keydownEvent$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n    }\r\n\r\n    private _backdropClick$: Subject<MouseEvent> = new Subject();\r\n    private _keydownEvent$: Subject<KeyboardEvent> = new Subject();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case \"click\":\r\n                this._backdropClick$.next(event as MouseEvent);\r\n                break;\r\n            case \"keydown\":\r\n                this._keydownEvent$.next(event as KeyboardEvent);\r\n                break;\r\n            default:\r\n                throw new Error(\"no such event type\");\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NgxMatTimepickerClockFace } from \"../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { NgxMatTimepickerPeriods } from \"../models/ngx-mat-timepicker-periods.enum\";\r\nimport { NgxMatTimepickerAdapter } from \"./ngx-mat-timepicker-adapter\";\r\nimport { DateTime } from \"luxon\";\r\n\r\nconst DEFAULT_HOUR: NgxMatTimepickerClockFace = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: NgxMatTimepickerClockFace = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class NgxMatTimepickerService {\r\n\r\n\r\n    set hour(hour: NgxMatTimepickerClockFace) {\r\n        this._hour$.next(hour);\r\n    }\r\n\r\n    set minute(minute: NgxMatTimepickerClockFace) {\r\n        this._minute$.next(minute);\r\n    }\r\n\r\n    set period(period: NgxMatTimepickerPeriods) {\r\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this._period$.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedHour(): Observable<NgxMatTimepickerClockFace> {\r\n        return this._hour$.asObservable();\r\n    }\r\n\r\n    get selectedMinute(): Observable<NgxMatTimepickerClockFace> {\r\n        return this._minute$.asObservable();\r\n    }\r\n\r\n    get selectedPeriod(): Observable<NgxMatTimepickerPeriods> {\r\n        return this._period$.asObservable();\r\n    }\r\n\r\n    private _hour$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_HOUR);\r\n    private _minute$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_MINUTE);\r\n    private _period$ = new BehaviorSubject<NgxMatTimepickerPeriods>(NgxMatTimepickerPeriods.AM);\r\n\r\n    getFullTime(format: number): string {\r\n        const selectedHour = this._hour$.getValue().time;\r\n        const selectedMinute = this._minute$.getValue().time;\r\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\r\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\r\n        const period = format === 12 ? this._period$.getValue() : \"\";\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n\r\n        return NgxMatTimepickerAdapter.formatTime(time, {format});\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\r\n                this._setDefaultTime(time, format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    private _resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = NgxMatTimepickerPeriods.AM;\r\n    }\r\n\r\n    private _setDefaultTime(time: string, format: number) {\r\n        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, {format}).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as NgxMatTimepickerPeriods)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as NgxMatTimepickerPeriods;\r\n\r\n        } else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: NgxMatTimepickerPeriods): number {\r\n    switch (period) {\r\n        case NgxMatTimepickerPeriods.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case NgxMatTimepickerPeriods.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n//\r\nimport { NgxMatTimepickerAdapter } from \"../services/ngx-mat-timepicker-adapter\";\r\n\r\nexport const NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken<string>(\"TimeLocale\", {\r\n    providedIn: \"root\",\r\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\r\n});\r\n","import {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\r\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\r\nimport {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\r\nimport {NgxMatTimepickerDisabledConfig} from \"../models/ngx-mat-timepicker-disabled-config.interface\";\r\n//\r\nimport {DateTime} from \"luxon\";\r\n\r\n// @dynamic\r\nexport class NgxMatTimepickerUtils {\r\n\r\n    static disableHours(hours: NgxMatTimepickerClockFace[], config: NgxMatTimepickerDisabledConfig): NgxMatTimepickerClockFace[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({hour}).toFormat(NgxMatTimepickerFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\r\n                };\r\n            });\r\n        }\r\n\r\n        return hours;\r\n    }\r\n\r\n    static disableMinutes(minutes: NgxMatTimepickerClockFace[], selectedHour: number, config: NgxMatTimepickerDisabledConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = DateTime.fromObject({\r\n                    hour,\r\n                    minute: value.time\r\n                }).toFormat(NgxMatTimepickerFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"minutes\")\r\n                };\r\n            });\r\n        }\r\n\r\n        return minutes;\r\n    }\r\n\r\n    static getHours(format: number): NgxMatTimepickerClockFace[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    static getMinutes(gap = 1): NgxMatTimepickerClockFace[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n\r\n        return minutes;\r\n    }\r\n\r\n    static isDigit(e: KeyboardEvent) {\r\n        // Allow: backspace, delete, tab, escape, enter\r\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n            // Allow: Ctrl/cmd+A\r\n            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+C\r\n            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+X\r\n            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: home, end, left, right, up, down\r\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n            return true;\r\n        }\r\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n    }\r\n\r\n\r\n}\r\n","// COMPONENTS\r\nexport {NgxMatTimepickerFieldComponent} from \"./lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\r\nexport {NgxMatTimepickerToggleComponent} from \"./lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\r\n// DIRECTIVES\r\nexport {NgxMatTimepickerDirective} from \"./lib/directives/ngx-mat-timepicker.directive\";\r\nexport {NgxMatTimepickerToggleIconDirective} from \"./lib/directives/ngx-mat-timepicker-toggle-icon.directive\";\r\n// MODELS\r\nexport {NgxMatTimepickerConfig} from \"./lib/models/ngx-mat-timepicker-config.interface\";\r\n//\r\nexport * from \"./lib/ngx-mat-timepicker.module\";\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component} from \"@angular/core\";\r\n\r\ninterface Theme {\r\n    description: string;\r\n    value: string\r\n}\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class NgxMatTimepickerAppComponent {\r\n\r\n    selectedTheme: Theme;\r\n    selectedTime: any;\r\n    themes: Theme[] = [\r\n        {value: \"\", description: \"Light\"},\r\n        {value: \"dark-theme\", description: \"Dark\"}\r\n    ];\r\n\r\n    constructor() {\r\n        this.selectedTheme = this.themes[0];\r\n    }\r\n\r\n    updateTheme(theme: Theme): void {\r\n        this.selectedTheme = theme;\r\n        document.body.classList.toggle(\"dark-theme\", !!theme.value);\r\n    }\r\n\r\n}\r\n","<ng-template #fakeRadioButton>\r\n    <mat-icon> radio_button_unchecked</mat-icon>\r\n</ng-template>\r\n<mat-toolbar class=\"ngx-mtp-header mat-elevation-z6\"\r\n             color=\"primary\">\r\n    <div>\r\n        <img class=\"ngx-mtp-ng-logo\"\r\n             src=\"assets/angular-white-transparent.svg\"\r\n             alt=\"\" />\r\n        <span class=\"ngx-mtp-header-title\">ngx-mat-timepicker</span>\r\n    </div>\r\n    <div>\r\n        <button mat-button\r\n                [matMenuTriggerFor]=\"themeMenu\">\r\n            <mat-icon>format_color_fill</mat-icon>\r\n        </button>\r\n\r\n        <mat-menu #themeMenu>\r\n            <button mat-menu-item\r\n                    (click)=\"updateTheme(theme)\"\r\n                    *ngFor=\"let theme of themes\">\r\n                <mat-icon color=\"accent\"\r\n                          *ngIf=\"selectedTheme.value === theme.value; else fakeRadioButton\">radio_button_checked\r\n                </mat-icon>\r\n                {{theme.description}}\r\n                <mat-icon class=\"ngx-mtp-theme-example\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n                         width=\"100%\"\r\n                         height=\"100%\"\r\n                         viewBox=\"0 0 80 80\"\r\n                         fit=\"\"\r\n                         preserveAspectRatio=\"xMidYMid meet\"\r\n                         focusable=\"false\">\r\n                        <defs>\r\n                            <path d=\"M77.87 0C79.05 0 80 .95 80 2.13v75.74c0 1.17-.95 2.13-2.13 2.13H2.13C.96 80 0 79.04 0 77.87V2.13C0 .95.96 0 2.13 0h75.74z\"\r\n                                  id=\"a\"></path>\r\n                            <path d=\"M54 40c3.32 0 6 2.69 6 6 0 1.2 0-1.2 0 0 0 3.31-2.68 6-6 6H26c-3.31 0-6-2.69-6-6 0-1.2 0 1.2 0 0 0-3.31 2.69-6 6-6h28z\"\r\n                                  id=\"b\"></path>\r\n                            <path d=\"M0 0h80v17.24H0V0z\"\r\n                                  id=\"c\"></path>\r\n                        </defs>\r\n                        <use xlink:href=\"#a\"\r\n                             [attr.fill]=\"theme.value ? '#444': '#fff'\"\r\n                             class=\"docs-theme-icon-background\"></use>\r\n                        <use xlink:href=\"#b\"\r\n                             fill=\"#ff4081\"\r\n                             class=\"docs-theme-icon-button\"></use>\r\n                        <use xlink:href=\"#c\"\r\n                             fill=\"#3f51b5\"\r\n                             class=\"docs-theme-icon-toolbar\"></use>\r\n                    </svg>\r\n                </mat-icon>\r\n            </button>\r\n        </mat-menu>\r\n        <a mat-button\r\n           href=\"https://github.com/tonysamperi/ngx-mat-timepicker\">\r\n            <img src=\"assets/github-circle-white-transparent.svg\"\r\n                 class=\"ngx-mtp-github-logo\"\r\n                 alt=\"\" /> Github\r\n        </a>\r\n    </div>\r\n</mat-toolbar>\r\n<div class=\"ngx-mtp-top\">\r\n    <h1 class=\"mat-h1 ngx-mtp-main-title\">\r\n        Angular Material Timepicker\r\n    </h1>\r\n</div>\r\n<div class=\"ngx-mtp-generic-section\">\r\n    <h2 class=\"mat-h2\">\r\n        Install NgxMatTimepicker\r\n    </h2>\r\n    <div class=\"terminal\">\r\n        <ul>\r\n            <li>npm i @popperjs/core</li>\r\n            <li>npm i ngx-popperjs</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n<div class=\"ngx-mtp-container\">\r\n    <form class=\"demo-form\">\r\n        <div>\r\n            <h2>Picker with 12h format</h2>\r\n            <p>using <span class=\"mat-color-primary\">default</span> palette (primary)</p>\r\n            <mat-form-field>\r\n                <input matInput\r\n                       name=\"selected_time\"\r\n                       [(ngModel)]=\"selectedTime\"\r\n                       [ngxMatTimepicker]=\"pickerA\"\r\n                       placeholder=\"e.g. 12:00 PM\"\r\n                       readonly />\r\n            </mat-form-field>\r\n            <ngx-mat-timepicker #pickerA></ngx-mat-timepicker>\r\n        </div>\r\n        <div>\r\n            <h2>Picker with 24h format</h2>\r\n            <p>using <span class=\"mat-color-accent\">accent</span> palette</p>\r\n            <mat-form-field>\r\n                <input matInput\r\n                       name=\"selected_time\"\r\n                       [format]=\"24\"\r\n                       [(ngModel)]=\"selectedTime\"\r\n                       [ngxMatTimepicker]=\"pickerB\"\r\n                       placeholder=\"12:00\"\r\n                       readonly />\r\n            </mat-form-field>\r\n            <ngx-mat-timepicker color=\"accent\"\r\n                                #pickerB></ngx-mat-timepicker>\r\n        </div>\r\n        <div>\r\n            <h2>ngx-mat-timepicker-field</h2>\r\n            <p>using <span class=\"mat-color-warn\">warn</span> palette</p>\r\n            <ngx-mat-timepicker-field color=\"warn\"\r\n                                      [defaultTime]=\"'11:11 AM'\"></ngx-mat-timepicker-field>\r\n        </div>\r\n    </form>\r\n</div>","import {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\nimport {BrowserModule} from \"@angular/platform-browser\";\r\nimport {NgModule} from \"@angular/core\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\n//\r\nimport {NgxMatTimepickerModule} from \"ngx-mat-timepicker\";\r\n//\r\nimport {NgxMatTimepickerAppComponent} from \"./app.component\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\nimport {MatSelectModule} from \"@angular/material/select\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatMenuModule} from \"@angular/material/menu\";\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NgxMatTimepickerAppComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        NgxMatTimepickerModule.setLocale(\"it-IT\"),\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatButtonModule\r\n    ],\r\n    providers: [],\r\n    bootstrap: [NgxMatTimepickerAppComponent]\r\n})\r\nexport class NgxMatTimepickerAppModule {\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport { NgxMatTimepickerAppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(NgxMatTimepickerAppModule)\r\n  .catch(err => console.error(err));\r\n"]}